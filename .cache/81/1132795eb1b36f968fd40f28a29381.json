{"id":"node_modules/bitwise/esm/bits/reduce-nor.js","dependencies":[{"name":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/package.json","includedInParent":true,"mtime":1637150058124},{"name":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/bitwise/package.json","includedInParent":true,"mtime":1635871980290}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Applies the NOR operation on the given bits. Returns one bit.\n * Throws if less than 2 bits are given.\n *\n * @example\n * reduceNor([1, 0, 0, 0, 1, 1, 0, 1]) => 0\n *\n * @param {Array} bits input data\n * @return {Integer} NOR bits\n */\nvar _default = function _default(bits) {\n  if (bits.length < 2) throw new RangeError('Not enough bits.');\n  var result = bits[0];\n\n  for (var i = 1; i < bits.length; i++) result = (result | bits[i]) ^ 1;\n\n  return result;\n};\n\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":1,"column":0}},{"generated":{"line":9,"column":0},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":2,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":3,"column":0}},{"generated":{"line":11,"column":0},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":4,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":5,"column":0}},{"generated":{"line":13,"column":0},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":6,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":7,"column":0}},{"generated":{"line":15,"column":0},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":8,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":9,"column":0}},{"generated":{"line":17,"column":0},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":10,"column":0}},{"generated":{"line":18,"column":15},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":11,"column":16}},{"name":"bits","generated":{"line":18,"column":33},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":11,"column":26}},{"generated":{"line":18,"column":37},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":11,"column":16}},{"generated":{"line":18,"column":39},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":11,"column":32}},{"generated":{"line":19,"column":0},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":12,"column":4}},{"name":"bits","generated":{"line":19,"column":6},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":12,"column":8}},{"generated":{"line":19,"column":10},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":12,"column":12}},{"name":"length","generated":{"line":19,"column":11},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":12,"column":13}},{"generated":{"line":19,"column":17},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":12,"column":8}},{"generated":{"line":19,"column":20},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":12,"column":22}},{"generated":{"line":19,"column":21},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":12,"column":4}},{"generated":{"line":19,"column":23},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":13,"column":8}},{"generated":{"line":19,"column":29},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":13,"column":14}},{"name":"RangeError","generated":{"line":19,"column":33},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":13,"column":18}},{"generated":{"line":19,"column":43},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":13,"column":14}},{"generated":{"line":19,"column":44},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":13,"column":29}},{"generated":{"line":19,"column":62},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":13,"column":14}},{"generated":{"line":19,"column":63},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":13,"column":8}},{"generated":{"line":20,"column":0},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":14,"column":4}},{"name":"result","generated":{"line":20,"column":6},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":14,"column":8}},{"generated":{"line":20,"column":12},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":14,"column":14}},{"name":"bits","generated":{"line":20,"column":15},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":14,"column":17}},{"generated":{"line":20,"column":19},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":14,"column":21}},{"generated":{"line":20,"column":20},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":14,"column":22}},{"generated":{"line":20,"column":21},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":14,"column":21}},{"generated":{"line":20,"column":22},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":14,"column":4}},{"generated":{"line":22,"column":0},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":15,"column":4}},{"generated":{"line":22,"column":7},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":15,"column":9}},{"name":"i","generated":{"line":22,"column":11},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":15,"column":13}},{"generated":{"line":22,"column":12},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":15,"column":14}},{"generated":{"line":22,"column":15},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":15,"column":17}},{"generated":{"line":22,"column":16},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":15,"column":4}},{"name":"i","generated":{"line":22,"column":18},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":15,"column":20}},{"generated":{"line":22,"column":19},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":15,"column":21}},{"name":"bits","generated":{"line":22,"column":22},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":15,"column":24}},{"generated":{"line":22,"column":26},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":15,"column":28}},{"name":"length","generated":{"line":22,"column":27},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":15,"column":29}},{"generated":{"line":22,"column":33},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":15,"column":4}},{"name":"i","generated":{"line":22,"column":35},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":15,"column":37}},{"generated":{"line":22,"column":36},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":15,"column":38}},{"generated":{"line":22,"column":38},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":15,"column":4}},{"name":"result","generated":{"line":22,"column":40},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":16,"column":8}},{"generated":{"line":22,"column":46},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":16,"column":14}},{"generated":{"line":22,"column":49},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":16,"column":18}},{"name":"result","generated":{"line":22,"column":50},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":16,"column":19}},{"generated":{"line":22,"column":56},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":16,"column":25}},{"name":"bits","generated":{"line":22,"column":59},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":16,"column":28}},{"generated":{"line":22,"column":63},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":16,"column":32}},{"name":"i","generated":{"line":22,"column":64},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":16,"column":33}},{"generated":{"line":22,"column":65},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":16,"column":32}},{"generated":{"line":22,"column":66},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":16,"column":18}},{"generated":{"line":22,"column":70},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":16,"column":39}},{"generated":{"line":22,"column":71},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":16,"column":8}},{"generated":{"line":24,"column":0},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":17,"column":4}},{"name":"result","generated":{"line":24,"column":9},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":17,"column":11}},{"generated":{"line":24,"column":15},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":17,"column":4}},{"generated":{"line":25,"column":0},"source":"node_modules/bitwise/esm/bits/reduce-nor.js","original":{"line":18,"column":1}}],"sources":{"node_modules/bitwise/esm/bits/reduce-nor.js":"/**\n * Applies the NOR operation on the given bits. Returns one bit.\n * Throws if less than 2 bits are given.\n *\n * @example\n * reduceNor([1, 0, 0, 0, 1, 1, 0, 1]) => 0\n *\n * @param {Array} bits input data\n * @return {Integer} NOR bits\n */\nexport default (function (bits) {\n    if (bits.length < 2)\n        throw new RangeError('Not enough bits.');\n    var result = bits[0];\n    for (var i = 1; i < bits.length; i++)\n        result = ((result | bits[i]) ^ 1);\n    return result;\n});\n"},"lineCount":null}},"error":null,"hash":"4f088261f8c5abc3a90ffecfaac85985","cacheData":{"env":{}}}