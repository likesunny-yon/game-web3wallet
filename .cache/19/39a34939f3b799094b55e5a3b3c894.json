{"id":"node_modules/gridplus-sdk/src/ethereumAbi.js","dependencies":[{"name":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/package.json","includedInParent":true,"mtime":1637150058124},{"name":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/package.json","includedInParent":true,"mtime":1635871971437},{"name":"buffer/","loc":{"line":1,"column":23},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/ethereumAbi.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/buffer/index.js"},{"name":"js-sha3","loc":{"line":2,"column":26},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/ethereumAbi.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/js-sha3/src/sha3.js"},{"name":"./constants","loc":{"line":3,"column":48},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/ethereumAbi.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/constants.js"}],"generated":{"js":"\nconst Buffer = require('buffer/').Buffer\nconst keccak256 = require('js-sha3').keccak256;\nconst { ETH_ABI_LATTICE_FW_TYPE_MAP } = require('./constants');\nconst NAME_MAX_SZ = 100;\nconst HEADER_SZ = 5 + NAME_MAX_SZ; // 4 byte sig + name + 1 byte param count\nconst CATEGORY_SZ = 32;\nconst PARAM_SZ = 26; // 20 byte name + 6 byte def\nconst MAX_PARAMS = 18;\nconst MAX_ABI_DEFS = 2;\nexports.MAX_ABI_DEFS = MAX_ABI_DEFS;\n\n// Build a request to add ABI data\nexports.buildAddAbiPayload = function(defs) {\n  if (!defs || !Array.isArray(defs))\n    throw new Error('Missing definitions.');\n  if (defs.length > exports.MAX_ABI_DEFS)\n    throw new Error(`You may only add ${MAX_ABI_DEFS} ABI definitions per request.`);\n  const b = Buffer.alloc(1 + (MAX_ABI_DEFS * (HEADER_SZ + CATEGORY_SZ + (PARAM_SZ * MAX_PARAMS))));\n  let off = 0;\n  b.writeUInt8(defs.length, off); off++;\n  defs.forEach((def) => {\n    if (!def.sig || !def.name || !def.params)\n      throw new Error('name, sig, and params must be present for every ABI definition.')\n    // -- Header data --\n    const sig = Buffer.from(def.sig, 'hex');\n    if (sig.length !== 4)\n      throw new Error('Function signatures must always be four bytes.');\n    sig.copy(b, off); off += sig.length;\n    const name = Buffer.from(def.name);\n    if (name.length > NAME_MAX_SZ - 1) // The -1 accounts for the null terminator\n      throw new Error(`Only function names shorter than ${NAME_MAX_SZ-1} characters are supported.`);\n    Buffer.from(def.name).slice(0, NAME_MAX_SZ).copy(b, off); off += NAME_MAX_SZ;\n    // Number of parameters\n    const numParams = Array.isArray(def.params) ? def.params.length : 0;\n    b.writeUInt8(numParams, off); off++;\n    // -- (optional) Category name --\n    if (def.category && typeof def.category === 'string') {\n      const category = Buffer.from(def.category);\n      if (category.length > CATEGORY_SZ - 1) // -1 accounts for null terminator\n        throw new Error(`Category name must be shorter than ${CATEGORY_SZ - 1}. Got ${category.length}`);\n      category.copy(b, off);\n    }\n    off += CATEGORY_SZ;\n    // -- Param data --\n    if (numParams > MAX_PARAMS)\n      throw new Error('Currently only ABI defintions with <=10 parameters are supported.');\n    if (numParams > 0) {\n      // First copy param names (first 20 bytes)\n      def.params.forEach((param) => {\n        if (param.name === undefined || param.latticeTypeIdx === undefined || param.isArray === undefined || param.arraySz === undefined)\n          throw new Error('name, latticeTypeIdx, isArray, and arraySz must be defined for all ABI params.');\n        Buffer.from(param.name).slice(0, 20).copy(b, off); off += 20;\n      })\n      // Bump offset to account for blank param slots\n      off += 20 * (MAX_PARAMS - numParams);\n      // Next copy the definitions\n      def.params.forEach((param) => {\n        b.writeUInt8(param.latticeTypeIdx, off); off++;\n        b.writeUInt8(param.isArray === true, off); off++;\n        b.writeUInt32LE(param.arraySz, off); off += 4;\n      })\n      // Bump offset again\n      off += 6 * (MAX_PARAMS - numParams);\n    } else {\n      // If there are no params, just bump the offset\n      off += PARAM_SZ * MAX_PARAMS;\n    }\n  })\n  return b;\n}\n\n// Get the 4-byte function identifier based on the canonical name\nexports.getFuncSig = function(f) {\n  // Canonical name is:\n  // funcName(paramType0, ..., paramTypeN)\n  let canonicalName = `${f.name}(`;\n  f.inputs.forEach((input) => {\n    if (input.type.indexOf('tuple') > -1) {\n      const arrSuffix = input.type.slice(input.type.indexOf('tuple') + 5);\n      canonicalName += '('\n      input.components.forEach((c, i) => {\n        canonicalName += `${c.type}${i === input.components.length - 1 ? '' : ','}`;\n      })\n      canonicalName += `)${arrSuffix},`\n    } else {\n      canonicalName += `${input.type},`\n    }\n  })\n  if (f.inputs.length > 0)\n    canonicalName = canonicalName.slice(0, canonicalName.length - 1)\n  canonicalName += ')'\n  return keccak256(canonicalName).slice(0, 8);\n}\n\n//--------------------------------------\n// PARSERS\n//--------------------------------------\nfunction parseEtherscanAbiDefs(_defs, skipErrors=false) { // `_defs` are `result` of the parsed response\n  const defs = [];\n  _defs.forEach((d) => {\n    if (d.name && d.inputs && d.type === 'function' && d.stateMutability !== 'view' && d.constant !== true) {\n      try {\n        const sig = exports.getFuncSig(d);\n        const params = parseEtherscanAbiInputs(d.inputs);\n        defs.push({\n          name: d.name,\n          sig,\n          params,\n        })\n      } catch (err) {\n        if (skipErrors === true)\n          console.error('Failed to load def:', d.name, err.toString())\n        else\n          throw new Error(err)\n      }\n    }\n  })\n  return defs;\n}\n\nexports.abiParsers = {\n  etherscan: parseEtherscanAbiDefs,\n}\n\n//--------------------------------------\n// HELPERS\n//--------------------------------------\n// Parse the ABI param data into structs Lattice firmware will recognize.\nfunction parseEtherscanAbiInputs(inputs, data=[], isNestedTuple=false) {\n  let tupleParams = [];\n  inputs.forEach((input) => {\n    const typeName = input.type;\n    const d = { isArray: false, arraySz: 0, name: input.name, };\n    const openBracketIdx = typeName.indexOf('[');\n    const closeBracketIdx = typeName.indexOf(']');\n    const isMultiDim = typeName.split('[').length > 2;\n    if (isMultiDim) {\n      throw new Error('Skipping function with unsupported multidimensional array type')\n    } else {\n      if (openBracketIdx > -1 && closeBracketIdx > -1) {\n        if (openBracketIdx >= closeBracketIdx) {\n          ; // not a valid param -- skip it\n        } else if ((openBracketIdx + 1) === closeBracketIdx) {\n          d.isArray = true;\n        } else {\n          // Parse the array size if applicable\n          const number = parseInt(typeName.slice(openBracketIdx, closeBracketIdx))\n          if (isNaN(number)) {\n            return d;\n          }\n          d.isArray = true;\n          d.arraySz = number;\n        }\n      }\n      let singularTypeName = openBracketIdx > -1 ? typeName.slice(0, openBracketIdx) : typeName;\n      if (singularTypeName === 'tuple') {\n        if (isNestedTuple === true)\n          throw new Error('Nested tuples are not supported')\n        singularTypeName = `tuple${input.components.length}`;\n        tupleParams = parseEtherscanAbiInputs(input.components, tupleParams, true);\n      }\n      d.latticeTypeIdx = getTypeIdxLatticeFw(singularTypeName)\n      if (!d.latticeTypeIdx)\n        throw new Error(`Unsupported type: ${typeName}`)\n      data.push(d)\n    }\n  })\n  const params = data.concat(tupleParams)\n  if (params.length > 18)\n    throw new Error('Function has too many parameters for Lattice firmware (18 max)')\n  return data.concat(tupleParams);\n}\n\n// Enum values from inside Lattice firmware\nfunction getTypeIdxLatticeFw(type) {\n  return ETH_ABI_LATTICE_FW_TYPE_MAP[type];\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereumAbi.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}}],"sources":{"node_modules/gridplus-sdk/src/ethereumAbi.js":"const Buffer = require('buffer/').Buffer\nconst keccak256 = require('js-sha3').keccak256;\nconst { ETH_ABI_LATTICE_FW_TYPE_MAP } = require('./constants');\nconst NAME_MAX_SZ = 100;\nconst HEADER_SZ = 5 + NAME_MAX_SZ; // 4 byte sig + name + 1 byte param count\nconst CATEGORY_SZ = 32;\nconst PARAM_SZ = 26; // 20 byte name + 6 byte def\nconst MAX_PARAMS = 18;\nconst MAX_ABI_DEFS = 2;\nexports.MAX_ABI_DEFS = MAX_ABI_DEFS;\n\n// Build a request to add ABI data\nexports.buildAddAbiPayload = function(defs) {\n  if (!defs || !Array.isArray(defs))\n    throw new Error('Missing definitions.');\n  if (defs.length > exports.MAX_ABI_DEFS)\n    throw new Error(`You may only add ${MAX_ABI_DEFS} ABI definitions per request.`);\n  const b = Buffer.alloc(1 + (MAX_ABI_DEFS * (HEADER_SZ + CATEGORY_SZ + (PARAM_SZ * MAX_PARAMS))));\n  let off = 0;\n  b.writeUInt8(defs.length, off); off++;\n  defs.forEach((def) => {\n    if (!def.sig || !def.name || !def.params)\n      throw new Error('name, sig, and params must be present for every ABI definition.')\n    // -- Header data --\n    const sig = Buffer.from(def.sig, 'hex');\n    if (sig.length !== 4)\n      throw new Error('Function signatures must always be four bytes.');\n    sig.copy(b, off); off += sig.length;\n    const name = Buffer.from(def.name);\n    if (name.length > NAME_MAX_SZ - 1) // The -1 accounts for the null terminator\n      throw new Error(`Only function names shorter than ${NAME_MAX_SZ-1} characters are supported.`);\n    Buffer.from(def.name).slice(0, NAME_MAX_SZ).copy(b, off); off += NAME_MAX_SZ;\n    // Number of parameters\n    const numParams = Array.isArray(def.params) ? def.params.length : 0;\n    b.writeUInt8(numParams, off); off++;\n    // -- (optional) Category name --\n    if (def.category && typeof def.category === 'string') {\n      const category = Buffer.from(def.category);\n      if (category.length > CATEGORY_SZ - 1) // -1 accounts for null terminator\n        throw new Error(`Category name must be shorter than ${CATEGORY_SZ - 1}. Got ${category.length}`);\n      category.copy(b, off);\n    }\n    off += CATEGORY_SZ;\n    // -- Param data --\n    if (numParams > MAX_PARAMS)\n      throw new Error('Currently only ABI defintions with <=10 parameters are supported.');\n    if (numParams > 0) {\n      // First copy param names (first 20 bytes)\n      def.params.forEach((param) => {\n        if (param.name === undefined || param.latticeTypeIdx === undefined || param.isArray === undefined || param.arraySz === undefined)\n          throw new Error('name, latticeTypeIdx, isArray, and arraySz must be defined for all ABI params.');\n        Buffer.from(param.name).slice(0, 20).copy(b, off); off += 20;\n      })\n      // Bump offset to account for blank param slots\n      off += 20 * (MAX_PARAMS - numParams);\n      // Next copy the definitions\n      def.params.forEach((param) => {\n        b.writeUInt8(param.latticeTypeIdx, off); off++;\n        b.writeUInt8(param.isArray === true, off); off++;\n        b.writeUInt32LE(param.arraySz, off); off += 4;\n      })\n      // Bump offset again\n      off += 6 * (MAX_PARAMS - numParams);\n    } else {\n      // If there are no params, just bump the offset\n      off += PARAM_SZ * MAX_PARAMS;\n    }\n  })\n  return b;\n}\n\n// Get the 4-byte function identifier based on the canonical name\nexports.getFuncSig = function(f) {\n  // Canonical name is:\n  // funcName(paramType0, ..., paramTypeN)\n  let canonicalName = `${f.name}(`;\n  f.inputs.forEach((input) => {\n    if (input.type.indexOf('tuple') > -1) {\n      const arrSuffix = input.type.slice(input.type.indexOf('tuple') + 5);\n      canonicalName += '('\n      input.components.forEach((c, i) => {\n        canonicalName += `${c.type}${i === input.components.length - 1 ? '' : ','}`;\n      })\n      canonicalName += `)${arrSuffix},`\n    } else {\n      canonicalName += `${input.type},`\n    }\n  })\n  if (f.inputs.length > 0)\n    canonicalName = canonicalName.slice(0, canonicalName.length - 1)\n  canonicalName += ')'\n  return keccak256(canonicalName).slice(0, 8);\n}\n\n//--------------------------------------\n// PARSERS\n//--------------------------------------\nfunction parseEtherscanAbiDefs(_defs, skipErrors=false) { // `_defs` are `result` of the parsed response\n  const defs = [];\n  _defs.forEach((d) => {\n    if (d.name && d.inputs && d.type === 'function' && d.stateMutability !== 'view' && d.constant !== true) {\n      try {\n        const sig = exports.getFuncSig(d);\n        const params = parseEtherscanAbiInputs(d.inputs);\n        defs.push({\n          name: d.name,\n          sig,\n          params,\n        })\n      } catch (err) {\n        if (skipErrors === true)\n          console.error('Failed to load def:', d.name, err.toString())\n        else\n          throw new Error(err)\n      }\n    }\n  })\n  return defs;\n}\n\nexports.abiParsers = {\n  etherscan: parseEtherscanAbiDefs,\n}\n\n//--------------------------------------\n// HELPERS\n//--------------------------------------\n// Parse the ABI param data into structs Lattice firmware will recognize.\nfunction parseEtherscanAbiInputs(inputs, data=[], isNestedTuple=false) {\n  let tupleParams = [];\n  inputs.forEach((input) => {\n    const typeName = input.type;\n    const d = { isArray: false, arraySz: 0, name: input.name, };\n    const openBracketIdx = typeName.indexOf('[');\n    const closeBracketIdx = typeName.indexOf(']');\n    const isMultiDim = typeName.split('[').length > 2;\n    if (isMultiDim) {\n      throw new Error('Skipping function with unsupported multidimensional array type')\n    } else {\n      if (openBracketIdx > -1 && closeBracketIdx > -1) {\n        if (openBracketIdx >= closeBracketIdx) {\n          ; // not a valid param -- skip it\n        } else if ((openBracketIdx + 1) === closeBracketIdx) {\n          d.isArray = true;\n        } else {\n          // Parse the array size if applicable\n          const number = parseInt(typeName.slice(openBracketIdx, closeBracketIdx))\n          if (isNaN(number)) {\n            return d;\n          }\n          d.isArray = true;\n          d.arraySz = number;\n        }\n      }\n      let singularTypeName = openBracketIdx > -1 ? typeName.slice(0, openBracketIdx) : typeName;\n      if (singularTypeName === 'tuple') {\n        if (isNestedTuple === true)\n          throw new Error('Nested tuples are not supported')\n        singularTypeName = `tuple${input.components.length}`;\n        tupleParams = parseEtherscanAbiInputs(input.components, tupleParams, true);\n      }\n      d.latticeTypeIdx = getTypeIdxLatticeFw(singularTypeName)\n      if (!d.latticeTypeIdx)\n        throw new Error(`Unsupported type: ${typeName}`)\n      data.push(d)\n    }\n  })\n  const params = data.concat(tupleParams)\n  if (params.length > 18)\n    throw new Error('Function has too many parameters for Lattice firmware (18 max)')\n  return data.concat(tupleParams);\n}\n\n// Enum values from inside Lattice firmware\nfunction getTypeIdxLatticeFw(type) {\n  return ETH_ABI_LATTICE_FW_TYPE_MAP[type];\n}\n"},"lineCount":179}},"error":null,"hash":"bd4730bd6d15dfd960fed8f190d8564e","cacheData":{"env":{}}}