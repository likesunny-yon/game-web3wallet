{"id":"node_modules/@keystonehq/bc-ur-registry/dist/CryptoCoinInfo.js","dependencies":[{"name":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/dist/CryptoCoinInfo.js.map","includedInParent":true,"mtime":1635871978905},{"name":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/src/CryptoCoinInfo.ts","includedInParent":true,"mtime":1635871978905},{"name":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/package.json","includedInParent":true,"mtime":1637150058124},{"name":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/package.json","includedInParent":true,"mtime":1635871978905},{"name":"./lib","loc":{"line":4,"column":22},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/dist/CryptoCoinInfo.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/dist/lib/index.js"},{"name":"./RegistryItem","loc":{"line":5,"column":31},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/dist/CryptoCoinInfo.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/dist/RegistryItem.js"},{"name":"./RegistryType","loc":{"line":6,"column":31},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/dist/CryptoCoinInfo.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/dist/RegistryType.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CryptoCoinInfo = exports.Network = exports.Type = void 0;\nconst lib_1 = require(\"./lib\");\nconst RegistryItem_1 = require(\"./RegistryItem\");\nconst RegistryType_1 = require(\"./RegistryType\");\nvar Keys;\n(function (Keys) {\n    Keys[\"type\"] = \"1\";\n    Keys[\"network\"] = \"2\";\n})(Keys || (Keys = {}));\nvar Type;\n(function (Type) {\n    Type[Type[\"bitcoin\"] = 0] = \"bitcoin\";\n})(Type = exports.Type || (exports.Type = {}));\nvar Network;\n(function (Network) {\n    Network[Network[\"mainnet\"] = 0] = \"mainnet\";\n    Network[Network[\"testnet\"] = 1] = \"testnet\";\n})(Network = exports.Network || (exports.Network = {}));\nclass CryptoCoinInfo extends RegistryItem_1.RegistryItem {\n    constructor(type, network) {\n        super();\n        this.type = type;\n        this.network = network;\n        this.getRegistryType = () => {\n            return RegistryType_1.RegistryTypes.CRYPTO_COIN_INFO;\n        };\n        this.getType = () => {\n            return this.type || Type.bitcoin;\n        };\n        this.getNetwork = () => {\n            return this.network || Network.mainnet;\n        };\n        this.toDataItem = () => {\n            const map = {};\n            if (this.type) {\n                map[Keys.type] = this.type;\n            }\n            if (this.network) {\n                map[Keys.network] = this.network;\n            }\n            return new lib_1.DataItem(map);\n        };\n    }\n}\nexports.CryptoCoinInfo = CryptoCoinInfo;\nCryptoCoinInfo.fromDataItem = (dataItem) => {\n    const map = dataItem.getData();\n    const type = map[Keys.type];\n    const network = map[Keys.network];\n    return new CryptoCoinInfo(type, network);\n};\nCryptoCoinInfo.fromCBOR = (_cborPayload) => {\n    const dataItem = lib_1.decodeToDataItem(_cborPayload);\n    return CryptoCoinInfo.fromDataItem(dataItem);\n};\n"},"sourceMaps":{"js":{"version":3,"file":"CryptoCoinInfo.js","sourceRoot":"","sources":["../src/CryptoCoinInfo.ts"],"names":[],"mappings":";;;AAAA,+BAAmD;AACnD,iDAA8C;AAC9C,iDAA+C;AAE/C,IAAK,IAGJ;AAHD,WAAK,IAAI;IACP,kBAAU,CAAA;IACV,qBAAa,CAAA;AACf,CAAC,EAHI,IAAI,KAAJ,IAAI,QAGR;AAED,IAAY,IAEX;AAFD,WAAY,IAAI;IACd,qCAAW,CAAA;AACb,CAAC,EAFW,IAAI,GAAJ,YAAI,KAAJ,YAAI,QAEf;AAED,IAAY,OAGX;AAHD,WAAY,OAAO;IACjB,2CAAO,CAAA;IACP,2CAAO,CAAA;AACT,CAAC,EAHW,OAAO,GAAP,eAAO,KAAP,eAAO,QAGlB;AAED,MAAa,cAAe,SAAQ,2BAAY;IAK9C,YAAoB,IAAW,EAAU,OAAiB;QACxD,KAAK,EAAE,CAAC;QADU,SAAI,GAAJ,IAAI,CAAO;QAAU,YAAO,GAAP,OAAO,CAAU;QAJ1D,oBAAe,GAAG,GAAG,EAAE;YACrB,OAAO,4BAAa,CAAC,gBAAgB,CAAC;QACxC,CAAC,CAAC;QAMK,YAAO,GAAG,GAAG,EAAE;YACpB,OAAO,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC;QACnC,CAAC,CAAC;QAEK,eAAU,GAAG,GAAG,EAAE;YACvB,OAAO,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QACzC,CAAC,CAAC;QAEK,eAAU,GAAG,GAAG,EAAE;YACvB,MAAM,GAAG,GAAG,EAAE,CAAC;YACf,IAAI,IAAI,CAAC,IAAI,EAAE;gBACb,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;aAC5B;YACD,IAAI,IAAI,CAAC,OAAO,EAAE;gBAChB,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;aAClC;YACD,OAAO,IAAI,cAAQ,CAAC,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC;IAnBF,CAAC;;AAPH,wCAuCC;AAXe,2BAAY,GAAG,CAAC,QAAkB,EAAE,EAAE;IAClD,MAAM,GAAG,GAAG,QAAQ,CAAC,OAAO,EAAE,CAAC;IAC/B,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5B,MAAM,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAClC,OAAO,IAAI,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAC3C,CAAC,CAAC;AAEY,uBAAQ,GAAG,CAAC,YAAoB,EAAE,EAAE;IAChD,MAAM,QAAQ,GAAG,sBAAgB,CAAC,YAAY,CAAC,CAAC;IAChD,OAAO,cAAc,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;AAC/C,CAAC,CAAC","sourcesContent":["import { decodeToDataItem, DataItem } from './lib';\nimport { RegistryItem } from './RegistryItem';\nimport { RegistryTypes } from './RegistryType';\n\nenum Keys {\n  type = '1',\n  network = '2',\n}\n\nexport enum Type {\n  bitcoin = 0,\n}\n\nexport enum Network {\n  mainnet,\n  testnet,\n}\n\nexport class CryptoCoinInfo extends RegistryItem {\n  getRegistryType = () => {\n    return RegistryTypes.CRYPTO_COIN_INFO;\n  };\n\n  constructor(private type?: Type, private network?: Network) {\n    super();\n  }\n\n  public getType = () => {\n    return this.type || Type.bitcoin;\n  };\n\n  public getNetwork = () => {\n    return this.network || Network.mainnet;\n  };\n\n  public toDataItem = () => {\n    const map = {};\n    if (this.type) {\n      map[Keys.type] = this.type;\n    }\n    if (this.network) {\n      map[Keys.network] = this.network;\n    }\n    return new DataItem(map);\n  };\n\n  public static fromDataItem = (dataItem: DataItem) => {\n    const map = dataItem.getData();\n    const type = map[Keys.type];\n    const network = map[Keys.network];\n    return new CryptoCoinInfo(type, network);\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return CryptoCoinInfo.fromDataItem(dataItem);\n  };\n}\n"]}},"error":null,"hash":"218693adb65e68a2142df57b68bedfb3","cacheData":{"env":{}}}