{"id":"node_modules/eth-json-rpc-errors/src/utils.js","dependencies":[{"name":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/package.json","includedInParent":true,"mtime":1637150058124},{"name":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/eth-json-rpc-errors/package.json","includedInParent":true,"mtime":1632832301496},{"name":"./errorValues.json","loc":{"line":2,"column":28},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/eth-json-rpc-errors/src/utils.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/eth-json-rpc-errors/src/errorValues.json"},{"name":"./errorCodes.json","loc":{"line":3,"column":36},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/eth-json-rpc-errors/src/utils.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/eth-json-rpc-errors/src/errorCodes.json"},{"name":"./classes","loc":{"line":4,"column":33},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/eth-json-rpc-errors/src/utils.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/eth-json-rpc-errors/src/classes.js"}],"generated":{"js":"\nconst errorValues = require('./errorValues.json')\nconst FALLBACK_ERROR_CODE = require('./errorCodes.json').jsonRpc.internal\nconst { JsonRpcError } = require('./classes')\n\nconst JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.'\n\nconst FALLBACK_MESSAGE = 'Unspecified error message. This is  bug, please report it.'\n\nconst FALLBACK_ERROR = {\n  code: FALLBACK_ERROR_CODE,\n  message: getMessageFromCode(FALLBACK_ERROR_CODE)\n}\n\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n * @param {number} code - The integer error code.\n * @param {string} fallbackMessage - The fallback message.\n * @return {string} The corresponding message or the fallback message.\n */\nfunction getMessageFromCode(code, fallbackMessage = FALLBACK_MESSAGE) {\n\n  if (Number.isInteger(code)) {\n\n    const codeString = code.toString()\n    if (errorValues[codeString]) return errorValues[codeString].message\n\n    if (isJsonRpcServerError(code)) return JSON_RPC_SERVER_ERROR_MESSAGE\n\n    // TODO: allow valid codes and messages to be extended\n    // // EIP 1193 Status Codes\n    // if (code >= 4000 && code <= 4999) return Something?\n  }\n  return fallbackMessage\n}\n\n/**\n * Returns whether the given code is valid.\n * A code is only valid if it has a message.\n * @param {number} code - The code to check\n * @return {boolean} true if the code is valid, false otherwise.\n */\nfunction isValidCode(code) {\n\n  if (!Number.isInteger(code)) return false\n\n  const codeString = code.toString()\n  if (errorValues[codeString]) return true\n\n  if (isJsonRpcServerError(code)) return true\n\n  // TODO: allow valid codes and messages to be extended\n  // // EIP 1193 Status Codes\n  // if (code >= 4000 && code <= 4999) return true\n\n  return false\n}\n\n/**\n * Serializes the given error to an ETH JSON RPC-compatible error object.\n * Merely copies the given error's values if it is already compatible.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.originalError property.\n * Adds a 'stack' property if it exists on the given error.\n *\n * @param {any} error - The error to serialize.\n * @param {object} fallbackError - The custom fallback error values if the\n * given error is invalid.\n * @return {object} A standardized error object.\n */\nfunction serializeError (error, fallbackError = FALLBACK_ERROR) {\n\n  if (\n    !fallbackError || \n    !Number.isInteger(fallbackError.code) ||\n    typeof fallbackError.message !== 'string'\n  ) {\n    throw new Error(\n      'fallbackError must contain integer number code and string message.'\n    )\n  }\n\n  if (typeof error === 'object' && error instanceof JsonRpcError) {\n    return error.serialize()\n  }\n\n  const serialized = {}\n\n  if (error && isValidCode(error.code)) {\n\n    serialized.code = error.code\n\n    if (error.message && typeof error.message === 'string') {\n      serialized.message = error.message\n      if (error.hasOwnProperty('data')) serialized.data = error.data\n    } else {\n      serialized.message = getMessageFromCode(serialized.code)\n      serialized.data = { originalError: assignOriginalError(error) }\n    }\n\n  } else {\n    serialized.code = fallbackError.code\n    serialized.message = (\n      error && error.message\n        ? error.message\n        : fallbackError.message\n    )\n    serialized.data = { originalError: assignOriginalError(error) }\n  }\n\n  if (error && error.stack) serialized.stack = error.stack\n  return serialized\n}\n\n// Internal\n\nfunction isJsonRpcServerError (code) {\n  return code >= -32099 && code <= -32000\n}\n\nfunction assignOriginalError (error) {\n  if (error && typeof error === 'object' && !Array.isArray(error)) {\n    return Object.assign({}, error)\n  }\n  return error\n}\n\n// Exports\n\nmodule.exports = {\n  getMessageFromCode,\n  isValidCode,\n  serializeError,\n  JSON_RPC_SERVER_ERROR_MESSAGE,\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/eth-json-rpc-errors/src/utils.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}}],"sources":{"node_modules/eth-json-rpc-errors/src/utils.js":"\nconst errorValues = require('./errorValues.json')\nconst FALLBACK_ERROR_CODE = require('./errorCodes.json').jsonRpc.internal\nconst { JsonRpcError } = require('./classes')\n\nconst JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.'\n\nconst FALLBACK_MESSAGE = 'Unspecified error message. This is  bug, please report it.'\n\nconst FALLBACK_ERROR = {\n  code: FALLBACK_ERROR_CODE,\n  message: getMessageFromCode(FALLBACK_ERROR_CODE)\n}\n\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n * @param {number} code - The integer error code.\n * @param {string} fallbackMessage - The fallback message.\n * @return {string} The corresponding message or the fallback message.\n */\nfunction getMessageFromCode(code, fallbackMessage = FALLBACK_MESSAGE) {\n\n  if (Number.isInteger(code)) {\n\n    const codeString = code.toString()\n    if (errorValues[codeString]) return errorValues[codeString].message\n\n    if (isJsonRpcServerError(code)) return JSON_RPC_SERVER_ERROR_MESSAGE\n\n    // TODO: allow valid codes and messages to be extended\n    // // EIP 1193 Status Codes\n    // if (code >= 4000 && code <= 4999) return Something?\n  }\n  return fallbackMessage\n}\n\n/**\n * Returns whether the given code is valid.\n * A code is only valid if it has a message.\n * @param {number} code - The code to check\n * @return {boolean} true if the code is valid, false otherwise.\n */\nfunction isValidCode(code) {\n\n  if (!Number.isInteger(code)) return false\n\n  const codeString = code.toString()\n  if (errorValues[codeString]) return true\n\n  if (isJsonRpcServerError(code)) return true\n\n  // TODO: allow valid codes and messages to be extended\n  // // EIP 1193 Status Codes\n  // if (code >= 4000 && code <= 4999) return true\n\n  return false\n}\n\n/**\n * Serializes the given error to an ETH JSON RPC-compatible error object.\n * Merely copies the given error's values if it is already compatible.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.originalError property.\n * Adds a 'stack' property if it exists on the given error.\n *\n * @param {any} error - The error to serialize.\n * @param {object} fallbackError - The custom fallback error values if the\n * given error is invalid.\n * @return {object} A standardized error object.\n */\nfunction serializeError (error, fallbackError = FALLBACK_ERROR) {\n\n  if (\n    !fallbackError || \n    !Number.isInteger(fallbackError.code) ||\n    typeof fallbackError.message !== 'string'\n  ) {\n    throw new Error(\n      'fallbackError must contain integer number code and string message.'\n    )\n  }\n\n  if (typeof error === 'object' && error instanceof JsonRpcError) {\n    return error.serialize()\n  }\n\n  const serialized = {}\n\n  if (error && isValidCode(error.code)) {\n\n    serialized.code = error.code\n\n    if (error.message && typeof error.message === 'string') {\n      serialized.message = error.message\n      if (error.hasOwnProperty('data')) serialized.data = error.data\n    } else {\n      serialized.message = getMessageFromCode(serialized.code)\n      serialized.data = { originalError: assignOriginalError(error) }\n    }\n\n  } else {\n    serialized.code = fallbackError.code\n    serialized.message = (\n      error && error.message\n        ? error.message\n        : fallbackError.message\n    )\n    serialized.data = { originalError: assignOriginalError(error) }\n  }\n\n  if (error && error.stack) serialized.stack = error.stack\n  return serialized\n}\n\n// Internal\n\nfunction isJsonRpcServerError (code) {\n  return code >= -32099 && code <= -32000\n}\n\nfunction assignOriginalError (error) {\n  if (error && typeof error === 'object' && !Array.isArray(error)) {\n    return Object.assign({}, error)\n  }\n  return error\n}\n\n// Exports\n\nmodule.exports = {\n  getMessageFromCode,\n  isValidCode,\n  serializeError,\n  JSON_RPC_SERVER_ERROR_MESSAGE,\n}\n"},"lineCount":137}},"error":null,"hash":"0e46655308001be497996627571e8101","cacheData":{"env":{}}}