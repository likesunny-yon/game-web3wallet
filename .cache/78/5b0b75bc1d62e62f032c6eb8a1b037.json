{"id":"node_modules/@keystonehq/bc-ur-registry/dist/CryptoPSBT.js","dependencies":[{"name":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/dist/CryptoPSBT.js.map","includedInParent":true,"mtime":1635871978905},{"name":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/src/CryptoPSBT.ts","includedInParent":true,"mtime":1635871978905},{"name":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/package.json","includedInParent":true,"mtime":1637150058124},{"name":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/package.json","includedInParent":true,"mtime":1635871978905},{"name":"./lib","loc":{"line":4,"column":22},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/dist/CryptoPSBT.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/dist/lib/index.js"},{"name":"./RegistryItem","loc":{"line":5,"column":31},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/dist/CryptoPSBT.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/dist/RegistryItem.js"},{"name":"./RegistryType","loc":{"line":6,"column":31},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/dist/CryptoPSBT.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/dist/RegistryType.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CryptoPSBT = void 0;\nconst lib_1 = require(\"./lib\");\nconst RegistryItem_1 = require(\"./RegistryItem\");\nconst RegistryType_1 = require(\"./RegistryType\");\nclass CryptoPSBT extends RegistryItem_1.RegistryItem {\n    constructor(psbt) {\n        super();\n        this.psbt = psbt;\n        this.getRegistryType = () => RegistryType_1.RegistryTypes.CRYPTO_PSBT;\n        this.getPSBT = () => this.psbt;\n        this.toDataItem = () => {\n            return new lib_1.DataItem(this.psbt);\n        };\n    }\n}\nexports.CryptoPSBT = CryptoPSBT;\nCryptoPSBT.fromDataItem = (dataItem) => {\n    const psbt = dataItem.getData();\n    if (!psbt) {\n        throw new Error(`#[ur-registry][CryptoPSBT][fn.fromDataItem]: decoded [dataItem][#data] is undefined: ${dataItem}`);\n    }\n    return new CryptoPSBT(psbt);\n};\nCryptoPSBT.fromCBOR = (_cborPayload) => {\n    const dataItem = lib_1.decodeToDataItem(_cborPayload);\n    return CryptoPSBT.fromDataItem(dataItem);\n};\n"},"sourceMaps":{"js":{"version":3,"file":"CryptoPSBT.js","sourceRoot":"","sources":["../src/CryptoPSBT.ts"],"names":[],"mappings":";;;AAAA,+BAAmD;AACnD,iDAA8C;AAC9C,iDAA+C;AAE/C,MAAa,UAAW,SAAQ,2BAAY;IAG1C,YAAoB,IAAY;QAC9B,KAAK,EAAE,CAAC;QADU,SAAI,GAAJ,IAAI,CAAQ;QAFhC,oBAAe,GAAG,GAAG,EAAE,CAAC,4BAAa,CAAC,WAAW,CAAC;QAM3C,YAAO,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC;QAE1B,eAAU,GAAG,GAAG,EAAE;YACvB,OAAO,IAAI,cAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC,CAAC;IANF,CAAC;;AALH,gCA2BC;AAde,uBAAY,GAAG,CAAC,QAAkB,EAAE,EAAE;IAClD,MAAM,IAAI,GAAG,QAAQ,CAAC,OAAO,EAAE,CAAC;IAChC,IAAI,CAAC,IAAI,EAAE;QACT,MAAM,IAAI,KAAK,CACb,wFAAwF,QAAQ,EAAE,CACnG,CAAC;KACH;IACD,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;AAC9B,CAAC,CAAC;AAEY,mBAAQ,GAAG,CAAC,YAAoB,EAAE,EAAE;IAChD,MAAM,QAAQ,GAAG,sBAAgB,CAAC,YAAY,CAAC,CAAC;IAChD,OAAO,UAAU,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;AAC3C,CAAC,CAAC","sourcesContent":["import { decodeToDataItem, DataItem } from './lib';\nimport { RegistryItem } from './RegistryItem';\nimport { RegistryTypes } from './RegistryType';\n\nexport class CryptoPSBT extends RegistryItem {\n  getRegistryType = () => RegistryTypes.CRYPTO_PSBT;\n\n  constructor(private psbt: Buffer) {\n    super();\n  }\n\n  public getPSBT = () => this.psbt;\n\n  public toDataItem = () => {\n    return new DataItem(this.psbt);\n  };\n\n  public static fromDataItem = (dataItem: DataItem) => {\n    const psbt = dataItem.getData();\n    if (!psbt) {\n      throw new Error(\n        `#[ur-registry][CryptoPSBT][fn.fromDataItem]: decoded [dataItem][#data] is undefined: ${dataItem}`,\n      );\n    }\n    return new CryptoPSBT(psbt);\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return CryptoPSBT.fromDataItem(dataItem);\n  };\n}\n"]}},"error":null,"hash":"7207559eb37ee98b0ffe2d56d8e45f80","cacheData":{"env":{}}}