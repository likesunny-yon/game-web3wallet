{"id":"node_modules/gridplus-sdk/src/ethereum.js","dependencies":[{"name":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/package.json","includedInParent":true,"mtime":1637150058124},{"name":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/package.json","includedInParent":true,"mtime":1635871971437},{"name":"bignumber.js","loc":{"line":3,"column":19},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/ethereum.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/bignumber.js/bignumber.js"},{"name":"buffer/","loc":{"line":4,"column":23},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/ethereum.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/buffer/index.js"},{"name":"borc","loc":{"line":5,"column":21},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/ethereum.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/borc/src/index.js"},{"name":"./constants","loc":{"line":6,"column":26},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/ethereum.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/constants.js"},{"name":"ethers","loc":{"line":7,"column":23},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/ethereum.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/ethers/lib.esm/index.js"},{"name":"ethers-eip712","loc":{"line":8,"column":23},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/ethereum.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/ethers-eip712/dist/index.es.js"},{"name":"js-sha3","loc":{"line":9,"column":26},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/ethereum.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/js-sha3/src/sha3.js"},{"name":"rlp-browser","loc":{"line":10,"column":20},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/ethereum.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/rlp-browser/index.js"},{"name":"secp256k1","loc":{"line":11,"column":26},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/ethereum.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/node_modules/secp256k1/elliptic.js"}],"generated":{"js":"\n// Utils for Ethereum transactions. This is effecitvely a shim of ethereumjs-util, which\n// does not have browser (or, by proxy, React-Native) support.\nconst BN = require('bignumber.js');\nconst Buffer = require('buffer/').Buffer;\nconst cbor = require('borc');\nconst constants = require('./constants');\nconst ethers = require('ethers');\nconst eip712 = require('ethers-eip712');\nconst keccak256 = require('js-sha3').keccak256;\nconst rlp = require('rlp-browser');\nconst secp256k1 = require('secp256k1');\n\nexports.buildEthereumMsgRequest = function(input) {\n  if (!input.payload || !input.protocol || !input.signerPath)\n    throw new Error('You must provide `payload`, `signerPath`, and `protocol` arguments in the messsage request');\n  if (input.signerPath.length > 5 || input.signerPath.length < 2) \n    throw new Error('Please provide a signer path with 2-5 indices');\n  const req = {\n    schema: constants.signingSchema.ETH_MSG,\n    payload: null,\n    input, // Save the input for later\n    msg: null, // Save the buffered message for later\n  }\n  try {\n    switch (input.protocol) {\n      case 'signPersonal':\n        return buildPersonalSignRequest(req, input)\n      case 'eip712':\n        if (!input.fwConstants.eip712Supported)\n          throw new Error('EIP712 is not supported by your Lattice firmware version. Please upgrade.')\n        return buildEIP712Request(req, input)\n      default:\n        throw new Error('Unsupported protocol');\n    }\n  } catch (err) {\n    return { err: err.toString() }\n  }\n}\n\nexports.validateEthereumMsgResponse = function(res, req) {\n  const { signer, sig } = res;\n  const { input, msg, prehash=null } = req;\n  if (input.protocol === 'signPersonal') {\n    // NOTE: We are currently hardcoding networkID=1 and useEIP155=false but these\n    //       may be configurable in future versions\n    const hash =  prehash ? \n                  prehash : \n                  Buffer.from(keccak256(Buffer.concat([get_personal_sign_prefix(msg.length), msg])), 'hex');\n    return addRecoveryParam(hash, sig, signer, 1, false)\n  } else if (input.protocol === 'eip712') {\n    const digest = prehash ? prehash : eip712.TypedDataUtils.encodeDigest(req.input.payload);\n    return addRecoveryParam(digest, sig, signer)\n  } else {\n    throw new Error('Unsupported protocol');\n  }\n}\n\nexports.buildEthereumTxRequest = function(data) {\n  try {\n    let { chainId=1 } = data;\n    const { signerPath, eip155=null, fwConstants } = data;\n    const { extraDataFrameSz, extraDataMaxFrames, prehashAllowed } = fwConstants;\n    const EXTRA_DATA_ALLOWED = extraDataFrameSz > 0 && extraDataMaxFrames > 0;\n    const MAX_BASE_DATA_SZ = fwConstants.ethMaxDataSz;\n    const VAR_PATH_SZ = fwConstants.varAddrPathSzAllowed;\n\n    // Sanity checks:\n    // There are a handful of named chains we allow the user to reference (`chainIds`)\n    // Custom chainIDs should be either numerical or hex strings\n    if (typeof chainId !== 'number' && isValidChainIdHexNumStr(chainId) === false) \n      chainId = chainIds[chainId];\n    // If this was not a custom chainID and we cannot find the name of it, exit\n    if (!chainId) \n      throw new Error('Unsupported chain ID or name');\n    // Sanity check on signePath\n    if (!signerPath) \n      throw new Error('`signerPath` not provided');\n\n    // Determine if we should use EIP155 given the chainID.\n    // If we are explicitly told to use eip155, we will use it. Otherwise,\n    // we will look up if the specified chainId is associated with a chain\n    // that does not use EIP155 by default. Note that most do use EIP155.\n    let useEIP155 = chainUsesEIP155(chainId);\n    if (eip155 !== null && typeof eip155 === 'boolean')\n      useEIP155 = eip155;\n\n    // Hack for metamask, which sends value=null for 0 ETH transactions\n    if (!data.value)\n      data.value = 0;\n      \n    //--------------\n    // 1. BUILD THE RAW TX FOR FUTURE RLP ENCODING\n    //--------------\n\n    // Ensure all fields are 0x-prefixed hex strings\n    const rawTx = [];\n    // Build the transaction buffer array\n    const nonceBytes = ensureHexBuffer(data.nonce);\n    const gasPriceBytes = ensureHexBuffer(data.gasPrice);\n    const gasLimitBytes = ensureHexBuffer(data.gasLimit);\n    const toBytes = ensureHexBuffer(data.to);\n    const valueBytes = ensureHexBuffer(data.value);\n    const dataBytes = ensureHexBuffer(data.data);\n    rawTx.push(nonceBytes);\n    rawTx.push(gasPriceBytes);\n    rawTx.push(gasLimitBytes);\n    rawTx.push(toBytes);\n    rawTx.push(valueBytes);\n    rawTx.push(dataBytes);\n    // Add empty v,r,s values\n    if (useEIP155 === true) {\n      rawTx.push(ensureHexBuffer(chainId)); // v\n      rawTx.push(ensureHexBuffer(null));    // r\n      rawTx.push(ensureHexBuffer(null));    // s\n    }\n    //--------------\n    // 2. BUILD THE LATTICE REQUEST PAYLOAD\n    //--------------\n    const ETH_TX_NON_DATA_SZ = 122; // Accounts for metadata and non-data params\n    const txReqPayload = Buffer.alloc(MAX_BASE_DATA_SZ + ETH_TX_NON_DATA_SZ);\n    let off = 0;\n    // 1. EIP155 switch and chainID\n    //------------------\n    txReqPayload.writeUInt8(Number(useEIP155), off); off++;\n    // NOTE: Originally we designed for a 1-byte chainID, but modern rollup chains use much larger\n    // chainID values. To account for these, we will put the chainID into the `data` buffer if it\n    // is >=255. Values up to UINT64_MAX will be allowed.\n    let chainIdBuf; \n    let chainIdBufSz = 0;\n    if (useChainIdBuffer(chainId) === true) {\n      chainIdBuf = getChainIdBuf(chainId);\n      chainIdBufSz = chainIdBuf.length;\n      if (chainIdBufSz > constants.MAX_CHAIN_ID_BYTES)\n        throw new Error('ChainID provided is too large.');\n      // Signal to Lattice firmware that it needs to read the chainId from the tx.data buffer\n      txReqPayload.writeUInt8(constants.HANDLE_LARGER_CHAIN_ID, off); off++;\n    } else {\n      // For chainIDs <255, write it to the chainId u8 slot in the main tx buffer\n      chainIdBuf = ensureHexBuffer(chainId);\n      if (chainIdBuf.length !== 1)\n        throw new Error('Error parsing chainID');\n      chainIdBuf.copy(txReqPayload, off); off += chainIdBuf.length;\n    }\n\n    // 2. Signer Path\n    //------------------\n    const signerPathBuf = buildSignerPathBuf(signerPath, VAR_PATH_SZ);\n    signerPathBuf.copy(txReqPayload, off);\n    off += signerPathBuf.length;\n\n    // 3. ETH TX request data\n    //------------------\n    if (nonceBytes.length > 4)\n      throw new Error('Nonce too large');\n    nonceBytes.copy(txReqPayload, off + (4 - nonceBytes.length)); off += 4;\n    if (gasPriceBytes.length > 8)\n      throw new Error('Gas price too large');\n    gasPriceBytes.copy(txReqPayload, off + (8 - gasPriceBytes.length)); off += 8;\n    if (gasLimitBytes.length > 4)\n      throw new Error('Gas limit too large');\n    gasLimitBytes.copy(txReqPayload, off + (4 - gasLimitBytes.length)); off += 4;\n    if (toBytes.length !== 20)\n      throw new Error('Invalid `to` address');\n    toBytes.copy(txReqPayload, off); off += 20;\n    if (valueBytes.length > 32)\n      throw new Error('Value too large');\n    valueBytes.copy(txReqPayload, off + (32 - valueBytes.length)); off += 32;\n    // Flow data into extraData requests, which will follow-up transaction requests, if supported/applicable    \n    const extraDataPayloads = [];\n    let prehash = null;\n    if (dataBytes && dataBytes.length > MAX_BASE_DATA_SZ) {\n      // Determine sizes and run through sanity checks\n      const chainIdExtraSz = chainIdBufSz > 0 ? chainIdBufSz + 1 : 0;\n      const totalSz = dataBytes.length + chainIdExtraSz;\n      const maxSzAllowed = MAX_BASE_DATA_SZ + (extraDataMaxFrames * extraDataFrameSz);\n\n      // Copy the data into a tmp buffer. Account for larger chain ID sizes if applicable.\n      const dataToCopy = Buffer.alloc(dataBytes.length + chainIdExtraSz)\n      if (chainIdExtraSz > 0) {\n        dataToCopy.writeUInt8(chainIdBufSz, 0);\n        chainIdBuf.copy(dataToCopy, 1);\n        dataBytes.copy(dataToCopy, chainIdExtraSz);\n      } else {\n        dataBytes.copy(dataToCopy, 0);\n      }\n\n      if (prehashAllowed && totalSz > maxSzAllowed) {\n        // If this payload is too large to send, but the Lattice allows a prehashed message, do that\n        prehash = Buffer.from(keccak256(rlp.encode(rawTx)), 'hex')\n      } else {\n        if ((!EXTRA_DATA_ALLOWED) || (EXTRA_DATA_ALLOWED && totalSz > maxSzAllowed))\n          throw new Error(`Data field too large (got ${dataBytes.length}; must be <=${maxSzAllowed-chainIdExtraSz} bytes)`);\n        // Split overflow data into extraData frames\n        const frames = splitFrames(dataToCopy.slice(MAX_BASE_DATA_SZ), extraDataFrameSz);\n        frames.forEach((frame) => {\n          const szLE = Buffer.alloc(4);\n          szLE.writeUInt32LE(frame.length);\n          extraDataPayloads.push(Buffer.concat([szLE, frame]));\n        })\n      }\n    }\n    // Write the data size (does *NOT* include the chainId buffer, if that exists)\n    txReqPayload.writeUInt16BE(dataBytes.length, off); off += 2;\n    // Copy in the chainId buffer if needed\n    if (chainIdBufSz > 0) {\n      txReqPayload.writeUInt8(chainIdBufSz, off); off++;\n      chainIdBuf.copy(txReqPayload, off); off += chainIdBufSz;\n    }\n    // Copy the first slice of the data itself. If this payload has been pre-hashed, include it\n    // in the `data` field. This will result in a different Lattice screen being drawn.\n    if (prehash) {\n      prehash.copy(txReqPayload, off); off += MAX_BASE_DATA_SZ;\n    } else {\n      dataBytes.slice(0, MAX_BASE_DATA_SZ).copy(txReqPayload, off); off += MAX_BASE_DATA_SZ;\n    }\n    return {\n      rawTx,\n      payload: txReqPayload.slice(0, off),\n      extraDataPayloads,\n      schema: constants.signingSchema.ETH_TRANSFER,  // We will use eth transfer for all ETH txs for v1 \n      chainId,\n      useEIP155,\n      signerPath,\n    };\n  } catch (err) {\n    return { err: err.message };\n  }\n}\n\n// From ethereumjs-util\nfunction stripZeros(a) {\n  let first = a[0]\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1)\n    first = a[0]\n  }\n  return a\n}\n\n// Given a 64-byte signature [r,s] we need to figure out the v value\n// and attah the full signature to the end of the transaction payload\nexports.buildEthRawTx = function(tx, sig, address, useEIP155=true) {\n  // RLP-encode the data we sent to the lattice\n  const rlpEncoded = rlp.encode(tx.rawTx);\n  const hash = Buffer.from(keccak256(rlpEncoded), 'hex')\n  const newSig = addRecoveryParam(hash, sig, address, tx.chainId, useEIP155);\n  // Use the signature to generate a new raw transaction payload\n  const newRawTx = tx.rawTx.slice(0, 6);\n  newRawTx.push(newSig.v);\n  // Per `ethereumjs-tx`, RLP encoding should include signature components w/ stripped zeros\n  // See: https://github.com/ethereumjs/ethereumjs-tx/blob/master/src/transaction.ts#L187\n  newRawTx.push(stripZeros(newSig.r));\n  newRawTx.push(stripZeros(newSig.s));\n  return rlp.encode(newRawTx).toString('hex');\n}\n\n// Attach a recovery parameter to a signature by brute-forcing ECRecover\nfunction addRecoveryParam(hashBuf, sig, address, chainId, useEIP155) {\n  try {\n    // Rebuild the keccak256 hash here so we can `ecrecover`\n    const hash = new Uint8Array(hashBuf);\n    let v = 0;\n    // Fix signature componenet lengths to 32 bytes each\n    const r = fixLen(sig.r, 32); sig.r = r;\n    const s = fixLen(sig.s, 32); sig.s = s;\n    // Calculate the recovery param\n    const rs = new Uint8Array(Buffer.concat([r, s]));\n    let pubkey = secp256k1.ecdsaRecover(rs, v, hash, false).slice(1)\n    // If the first `v` value is a match, return the sig!\n    if (pubToAddrStr(pubkey) === address.toString('hex')) {\n      sig.v  = getRecoveryParam(v, useEIP155, chainId);\n      return sig;\n    }\n    // Otherwise, try the other `v` value\n    v = 1;\n    pubkey = secp256k1.ecdsaRecover(rs, v, hash, false).slice(1)\n    if (pubToAddrStr(pubkey) === address.toString('hex')) {\n      sig.v  = getRecoveryParam(v, useEIP155, chainId);\n      return sig;\n    } else {\n      // If neither is a match, we should return an error\n      throw new Error('Invalid Ethereum signature returned.');\n    }\n  } catch (err) {\n    throw new Error(err);\n  }\n}\n\n// Convert an RLP-serialized transaction (plus signature) into a transaction hash\nexports.hashTransaction = function(serializedTx) {\n  return keccak256(Buffer.from(serializedTx, 'hex')); \n}\n\n// Returns address string given public key buffer\nfunction pubToAddrStr(pub) {\n  return keccak256(pub).slice(-40);\n}\n\nfunction fixLen(msg, length) {\n  const buf = Buffer.alloc(length)\n  if (msg.length < length) {\n    msg.copy(buf, length - msg.length)\n    return buf\n  }\n  return msg.slice(-length)\n}\n\n// Convert a 0/1 `v` into a recovery param:\n// * For non-EIP155 transactions, return `27 + v`\n// * For EIP155 transactions, return `(CHAIN_ID*2) + 35 + v`\nfunction getRecoveryParam(v, useEIP155, chainId=null) {\n  // If we are not using EIP155, convert v directly to a buffer and return it\n  if (false === useEIP155 || chainId === null)\n    return Buffer.from(new BN(v).plus(27).toString(16), 'hex');\n  // We will use EIP155 in most cases. Convert v to a bignum and operate on it.\n  // Note that the protocol calls for v = (CHAIN_ID*2) + 35/36, where 35 or 36\n  // is decided on based on the ecrecover result. `v` is passed in as either 0 or 1\n  // so we add 35 to that.\n  const chainIdBuf = getChainIdBuf(chainId);\n  const chainIdBN = new BN(chainIdBuf.toString('hex'), 16);\n  return ensureHexBuffer(`0x${chainIdBN.times(2).plus(35).plus(v).toString(16)}`);\n}\n\nfunction isHexStr(str) {\n  return (/^[0-9a-fA-F]+$/).test(str)\n}\n\nfunction isASCIIStr(str) {\n  return (/^[\\x00-\\x7F]+$/).test(str)\n}\n\n// Determine if the Lattice can display a string we give it. Currently, the Lattice can only\n// display ASCII strings, so we will reject other UTF8 codes.\n// In the future we may add a mechanism to display certain UTF8 codes such as popular emojis.\nfunction latticeCanDisplayStr(str) {\n  for (let i = 0; i < str.length; i++)\n    if (str.charCodeAt(i) < 0x0020 || str.charCodeAt(i) > 0x007f)\n      return false;\n  return true;\n}\n\nconst chainIds = {\n  mainnet: 1,\n  roptsten: 3,\n  rinkeby: 4,\n  kovan: 42,\n  goerli: 5\n}\n\n// Get a buffer containing the chainId value.\n// Returns a 1, 2, 4, or 8 byte buffer with the chainId encoded in big endian\nfunction getChainIdBuf(chainId) {\n  let b;\n  // If our chainID is a hex string, we can convert it to a hex\n  // buffer directly\n  if (true === isValidChainIdHexNumStr(chainId))\n    b = ensureHexBuffer(chainId);\n  // If our chainID is a base-10 number, parse with bignumber.js and convert to hex buffer\n  else\n    b = ensureHexBuffer(`0x${new BN(chainId).toString(16)}`);\n  // Make sure the buffer is an allowed size\n  if (b.length > 8)\n    throw new Error('ChainID provided is too large.');\n  // If this matches a u16, u32, or u64 size, return it now\n  if (b.length <= 2 || b.length === 4 || b.length === 8)\n    return b;\n  // For other size buffers, we need to pack into u32 or u64 before returning;\n  let buf;\n  if (b.length === 3) {\n    buf = Buffer.alloc(4);\n    buf.writeUInt32BE(chainId);\n  } else if (b.length <= 8) {\n    buf = Buffer.alloc(8);\n    b.copy(buf, 8 - b.length)\n  }\n  return buf;\n}\n\n// Determine if the chain uses EIP155 by default, based on the chainID\nfunction chainUsesEIP155(chainID) {\n  switch (chainID) {\n    case 3: // ropsten\n    case 4: // rinkeby\n      return false;\n    case 1: // mainnet\n    case 42: // kovan\n    case 5: // goerli\n    default: // all others should use eip155\n      return true;\n  }\n}\n\n// Determine if a valid number was passed in as a hex string\nfunction isValidChainIdHexNumStr(s) {\n  if (typeof s !== 'string')\n    return false;\n  if (s.slice(0, 2) !== '0x')\n    return false;\n  try {\n    const b = new BN(s, 16)\n    return b.isNaN() === false;\n  } catch (err) {\n    return false;\n  }\n}\n\n// If this is a nubmer that fits in one byte, we don't need to add it\n// to the `data` buffer of the main transaction. \n// Note the one edge case: we still need to use the `data` field for chainID=255.\nfunction useChainIdBuffer(id) {\n  const buf = getChainIdBuf(id);\n  if (buf.length === 1)\n    return buf.readUInt8(0) === 255;\n  return true;\n}\n\nexports.chainIds = chainIds;\n\nfunction isBase10NumStr(x) {\n  const bn = new BN(x).toString().split('.').join('');\n  const s = new String(x)\n  // Note that the JS native `String()` loses precision for large numbers, but we only\n  // want to validate the base of the number so we don't care about far out precision.\n  return bn.slice(0, 8) === s.slice(0, 8)\n}\n\n// Ensure a param is represented by a buffer\n// TODO: Remove circular dependency in util.js so that we can put this function there\nfunction ensureHexBuffer(x, zeroIsNull=true) {\n  try {\n    // For null values, return a 0-sized buffer. For most situations we assume\n    // 0 should be represented with a zero-length buffer (e.g. for RLP-building\n    // txs), but it can also be treated as a 1-byte buffer (`00`) if needed\n    if (x === null || (x === 0 && zeroIsNull === true)) \n      return Buffer.alloc(0);\n    const isNumber = typeof x === 'number' || isBase10NumStr(x);\n    // Otherwise try to get this converted to a hex string\n    if (isNumber) {\n      // If this is a number or a base-10 number string, convert it to hex\n      x = `${new BN(x).toString(16)}`;\n    } else if (typeof x === 'string' && x.slice(0, 2) === '0x') {\n      x = x.slice(2);\n    } else {\n      x = x.toString('hex')\n    }\n    if (x.length % 2 > 0) x = `0${x}`;\n    if (x === '00' && !isNumber)\n      return Buffer.alloc(0);\n    return Buffer.from(x, 'hex');\n  } catch (err) {\n    throw new Error(`Cannot convert ${x.toString()} to hex buffer (${err.toString()})`);\n  }\n}\nexports.ensureHexBuffer = ensureHexBuffer;\n\n\nfunction buildPersonalSignRequest(req, input) {\n  const MAX_BASE_MSG_SZ = input.fwConstants.ethMaxMsgSz;\n  const VAR_PATH_SZ = input.fwConstants.varAddrPathSzAllowed;\n  const L = (24) + MAX_BASE_MSG_SZ + 4;\n  let off = 0;\n  req.payload = Buffer.alloc(L);\n  req.payload.writeUInt8(constants.ethMsgProtocol.SIGN_PERSONAL, 0); off += 1;\n  // Write the signer path into the buffer\n  const signerPathBuf = buildSignerPathBuf(input.signerPath, VAR_PATH_SZ);\n  signerPathBuf.copy(req.payload, off);\n  off += signerPathBuf.length;\n  // Write the payload buffer. The payload can come in either as a buffer or as a string\n  let payload = input.payload;\n  // Determine if this is a hex string\n  let displayHex = false;\n  if (typeof input.payload === 'string') {\n    if (input.payload.slice(0, 2) === '0x') {\n      payload = ensureHexBuffer(input.payload)\n      displayHex = false === isASCIIStr(Buffer.from(input.payload.slice(2), 'hex').toString())\n    } else {\n      if (false === latticeCanDisplayStr(input.payload))\n        throw new Error('Currently, the Lattice can only display ASCII strings.');\n      payload = Buffer.from(input.payload)\n    }\n  } else if (typeof input.displayHex === 'boolean') {\n    // If this is a buffer and the user has specified whether or not this\n    // is a hex buffer with the optional argument, write that\n    displayHex = input.displayHex\n  } else {\n    // Otherwise, determine if this buffer is an ASCII string. If it is, set `displayHex` accordingly.\n    // NOTE: THIS MEANS THAT NON-ASCII STRINGS WILL DISPLAY AS HEX SINCE WE CANNOT KNOW IF THE REQUESTER\n    //        EXPECTED NON-ASCII CHARACTERS TO DISPLAY IN A STRING\n    // TODO: Develop a more elegant solution for this\n    if (!input.payload.toString)\n      throw new Error('Unsupported input data type');\n    displayHex = false === isASCIIStr(input.payload.toString())\n  }\n  const fwConst = input.fwConstants;\n  const maxSzAllowed = MAX_BASE_MSG_SZ + (fwConst.extraDataMaxFrames * fwConst.extraDataFrameSz);\n  if (fwConst.ethMsgPreHashAllowed && payload.length > maxSzAllowed) {\n    // If this message will not fit and pre-hashing is allowed, do that\n    req.payload.writeUInt8(displayHex, off); off += 1;\n    req.payload.writeUInt16LE(payload.length, off); off += 2;\n    const prehash = Buffer.from(keccak256(Buffer.concat([get_personal_sign_prefix(payload.length), payload])), 'hex');\n    prehash.copy(req.payload, off);\n    req.prehash = prehash;\n  } else {\n    // Otherwise we can fit the payload.\n    // Flow data into extraData requests, which will follow-up transaction requests, if supported/applicable    \n    const extraDataPayloads = getExtraData(payload, input);\n    // Write the payload and metadata into our buffer\n    req.extraDataPayloads = extraDataPayloads\n    req.msg = payload;\n    req.payload.writeUInt8(displayHex, off); off += 1;\n    req.payload.writeUInt16LE(payload.length, off); off += 2;\n    payload.copy(req.payload, off);\n  }\n  return req;\n}\n\nfunction buildEIP712Request(req, input) {\n  try {\n    const MAX_BASE_MSG_SZ = input.fwConstants.ethMaxMsgSz;\n    const VAR_PATH_SZ = input.fwConstants.varAddrPathSzAllowed;\n    const TYPED_DATA = constants.ethMsgProtocol.TYPED_DATA;\n    const L = (24) + MAX_BASE_MSG_SZ + 4;\n    let off = 0;\n    req.payload = Buffer.alloc(L);\n    req.payload.writeUInt8(TYPED_DATA.enumIdx, 0); off += 1;\n    // Write the signer path\n    const signerPathBuf = buildSignerPathBuf(input.signerPath, VAR_PATH_SZ);\n    signerPathBuf.copy(req.payload, off);\n    off += signerPathBuf.length;\n    // Parse/clean the EIP712 payload, serialize with CBOR, and write to the payload\n    const data = JSON.parse(JSON.stringify(input.payload));\n    if (!data.primaryType || !data.types[data.primaryType])\n      throw new Error('primaryType must be specified and the type must be included.')\n    if (!data.message || !data.domain)\n      throw new Error('message and domain must be specified.')\n    if (0 > Object.keys(data.types).indexOf('EIP712Domain'))\n      throw new Error('EIP712Domain type must be defined.')\n    // Parse the payload to ensure we have valid EIP712 data types and that\n    // they are encoded such that Lattice firmware can parse them.\n    // We need two different encodings:\n    // 1. Use `ethers` BigNumber when building the request to be validated by ethers-eip712.\n    //    Make sure we use a copy of the data to avoid mutation problems\n    input.payload.message = parseEIP712Msg( JSON.parse(JSON.stringify(data.message)), \n                                            JSON.parse(JSON.stringify(data.primaryType)), \n                                            JSON.parse(JSON.stringify(data.types)), \n                                            true);\n    input.payload.domain = parseEIP712Msg( JSON.parse(JSON.stringify(data.domain)), \n                                            'EIP712Domain', \n                                            JSON.parse(JSON.stringify(data.types)), \n                                            true);\n    // 2. Use `bignumber.js` for the request going to the Lattice, since it's the required\n    //    BigNumber lib for `cbor`, which we use to encode the request data to the Lattice.\n    data.domain = parseEIP712Msg(data.domain, 'EIP712Domain', data.types, false);\n    data.message = parseEIP712Msg(data.message, data.primaryType, data.types, false);\n    // Now build the message to be sent to the Lattice\n    const payload = Buffer.from(cbor.encode(data));\n    const fwConst = input.fwConstants;\n    const maxSzAllowed = MAX_BASE_MSG_SZ + (fwConst.extraDataMaxFrames * fwConst.extraDataFrameSz);\n    if (fwConst.ethMsgPreHashAllowed && payload.length > maxSzAllowed) {\n      // If this payload is too large to send, but the Lattice allows a prehashed message, do that\n      req.payload.writeUInt16LE(payload.length, off); off += 2;\n      const prehash = Buffer.from(keccak256(eip712.TypedDataUtils.encodeDigest(req.input.payload), 'hex'), 'hex');\n      prehash.copy(req.payload, off);\n      req.prehash = prehash;\n    } else {\n      const extraDataPayloads = getExtraData(payload, input);\n      req.extraDataPayloads = extraDataPayloads;\n      req.payload.writeUInt16LE(payload.length, off); off += 2;\n      payload.copy(req.payload, off); off += payload.length;\n      // Slice out the part of the buffer that we didn't use.\n      req.payload = req.payload.slice(0, off);\n    }\n    return req;\n  } catch (err) {\n    return { err: `Failed to build EIP712 request: ${err.message}` };\n  }\n}\n\nfunction buildSignerPathBuf(signerPath, varAddrPathSzAllowed) {\n  const buf = Buffer.alloc(24);\n  let off = 0;\n  if (varAddrPathSzAllowed && signerPath.length > 5)\n    throw new Error('Signer path must be <=5 indices.');\n  if (!varAddrPathSzAllowed && signerPath.length !== 5)\n    throw new Error('Your Lattice firmware only supports 5-index derivation paths. Please upgrade.');\n  buf.writeUInt32LE(signerPath.length, off); off += 4;\n  for (let i = 0; i < 5; i++) {\n    if (i < signerPath.length)\n      buf.writeUInt32LE(signerPath[i], off); \n    else\n      buf.writeUInt32LE(0, off);\n    off += 4;\n  }\n  return buf;\n}\n\nfunction getExtraData(payload, input) {\n  const { ethMaxMsgSz, extraDataFrameSz, extraDataMaxFrames } = input.fwConstants;\n  const MAX_BASE_MSG_SZ = ethMaxMsgSz;\n  const EXTRA_DATA_ALLOWED = extraDataFrameSz > 0 && extraDataMaxFrames > 0;\n  const extraDataPayloads = [];\n  if (payload.length > MAX_BASE_MSG_SZ) {\n    // Determine sizes and run through sanity checks\n    const maxSzAllowed = MAX_BASE_MSG_SZ + (extraDataMaxFrames * extraDataFrameSz);\n    if (!EXTRA_DATA_ALLOWED)\n      throw new Error(`Your message is ${payload.length} bytes, but can only be a maximum of ${MAX_BASE_MSG_SZ}`);\n    else if (EXTRA_DATA_ALLOWED && payload.length > maxSzAllowed)\n      throw new Error(`Your message is ${payload.length} bytes, but can only be a maximum of ${maxSzAllowed}`);\n    // Split overflow data into extraData frames\n    const frames = splitFrames(payload.slice(MAX_BASE_MSG_SZ), extraDataFrameSz);\n    frames.forEach((frame) => {\n      const szLE = Buffer.alloc(4);\n      szLE.writeUInt32LE(frame.length);\n      extraDataPayloads.push(Buffer.concat([szLE, frame]));\n    })\n  }\n  return extraDataPayloads;\n}\n\nfunction splitFrames(data, frameSz) {\n  const frames = []\n  const n = Math.ceil(data.length / frameSz);\n  let off = 0;\n  for (let i = 0; i < n; i++) {\n    frames.push(data.slice(off, off + frameSz));\n    off += frameSz;\n  }\n  return frames;\n}\n\nfunction parseEIP712Msg(msg, typeName, types, isEthers=false) {\n  try {\n    const type = types[typeName];\n    type.forEach((item) => {\n      const isCustomType = Object.keys(types).indexOf(item.type) > -1;\n      if (true === isCustomType) {\n        msg[item.name] = parseEIP712Msg(msg[item.name], item.type, types, isEthers)\n      } else {\n        msg[item.name] = parseEIP712Item(msg[item.name], item.type, isEthers)\n      }\n    })\n  } catch (err) {\n    throw new Error(err.message);\n  }\n  return msg;\n}\n\nfunction parseEIP712Item(data, type, isEthers=false) {\n  if (type === 'bytes') {\n    // Variable sized bytes need to be buffer type\n    data = ensureHexBuffer(data);\n  } else if (type.slice(0, 5) === 'bytes') {\n    // Fixed sizes bytes need to be buffer type. We also add some sanity checks.\n    const nBytes = parseInt(type.slice(5));\n    data = ensureHexBuffer(data);\n    if (data.length !== nBytes)\n      throw new Error(`Expected ${type} type, but got ${data.length} bytes`);\n  } else if (type === 'address') {\n    // Address must be a 20 byte buffer\n    data = ensureHexBuffer(data);\n    // Edge case to handle the 0-address\n    if (data.length === 0) {\n      data = Buffer.alloc(20);\n    }\n    if (data.length !== 20)\n      throw new Error(`Address type must be 20 bytes, but got ${data.length} bytes`);\n    // Ethers wants addresses as hex strings\n    if (isEthers === true) {\n      data = `0x${data.toString('hex')}`\n    }\n  } else if ( (constants.ethMsgProtocol.TYPED_DATA.typeCodes[type]) && \n              (type.indexOf('uint') > -1 || type.indexOf('int') > -1)) {\n    let b = ensureHexBuffer(data);\n    // Edge case to handle 0-value bignums\n    if (b.length === 0) {\n      b = Buffer.from('00', 'hex');\n    }\n    // Uint256s should be encoded as bignums.\n    if (isEthers === true) {\n      // `ethers` uses their own BigNumber lib\n      data = ethers.BigNumber.from(`0x${b.toString('hex')}`)\n    } else {\n      // `bignumber.js` is needed for `cbor` encoding, which gets sent to the Lattice and plays\n      // nicely with its firmware cbor lib.\n      // NOTE: If we instantiate a `bignumber.js` object, it will not match what `borc` creates\n      // when run inside of the browser (i.e. MetaMask). Thus we introduce this hack to make sure\n      // we are creating a compatible type.\n      // TODO: Find another cbor lib that is compataible with the firmware's lib in a browser\n      // context. This is surprisingly difficult - I tried several libs and only cbor/borc have\n      // worked (borc is a supposedly \"browser compatible\" version of cbor)\n      data = new cbor.Encoder().semanticTypes[1][0](b.toString('hex'), 16)\n    }\n  } else if (type === 'bool') {\n    // Booleans need to be cast to a u8\n    data = data === true ? 1 : 0;\n  }\n  // Other types don't need to be modified\n  return data;\n}\n\nfunction get_personal_sign_prefix(L) {\n  return Buffer.from(\n    `\\u0019Ethereum Signed Message:\\n${L.toString()}`,\n    'utf-8',\n  );\n}"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":270,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":271,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":272,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":273,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":274,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":275,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":276,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":277,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":278,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":279,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":280,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":281,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":282,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":283,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":284,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":285,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":286,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":287,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":288,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":289,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":290,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":291,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":292,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":293,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":294,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":295,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":296,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":297,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":298,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":299,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":300,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":301,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":302,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":303,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":304,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":305,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":306,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":307,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":308,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":309,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":310,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":311,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":312,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":313,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":314,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":315,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":316,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":317,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":318,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":319,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":320,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":321,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":322,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":323,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":324,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":325,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":326,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":327,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":328,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":329,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":330,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":331,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":332,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":333,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":334,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":335,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":336,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":337,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":338,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":339,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":340,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":341,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":342,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":343,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":344,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":345,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":346,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":347,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":348,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":349,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":350,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":351,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":352,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":353,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":354,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":355,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":356,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":357,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":358,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":359,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":360,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":361,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":362,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":363,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":364,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":365,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":366,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":367,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":368,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":369,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":370,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":371,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":372,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":373,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":374,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":375,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":376,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":377,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":378,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":379,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":380,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":381,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":382,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":383,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":384,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":385,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":386,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":387,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":388,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":389,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":390,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":391,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":392,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":393,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":394,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":395,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":396,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":397,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":398,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":399,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":400,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":401,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":402,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":403,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":404,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":405,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":406,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":407,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":408,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":409,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":410,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":411,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":412,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":413,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":414,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":415,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":416,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":417,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":418,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":419,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":420,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":421,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":422,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":423,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":424,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":425,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":426,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":427,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":428,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":429,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":430,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":431,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":432,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":433,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":434,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":435,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":436,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":437,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":438,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":439,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":440,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":441,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":442,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":443,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":444,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":445,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":446,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":447,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":448,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":449,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":450,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":451,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":452,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":453,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":454,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":455,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":456,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":457,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":458,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":459,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":460,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":461,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":462,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":463,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":464,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":465,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":466,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":467,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":468,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":469,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":470,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":471,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":472,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":473,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":474,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":475,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":476,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":477,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":478,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":479,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":480,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":481,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":482,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":483,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":484,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":485,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":486,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":487,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":488,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":489,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":490,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":491,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":492,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":493,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":494,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":495,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":496,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":497,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":498,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":499,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":500,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":501,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":502,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":503,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":504,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":505,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":506,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":507,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":508,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":509,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":510,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":511,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":512,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":513,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":514,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":515,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":516,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":517,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":518,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":519,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":520,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":521,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":522,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":523,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":524,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":525,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":526,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":527,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":528,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":529,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":530,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":531,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":532,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":533,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":534,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":535,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":536,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":537,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":538,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":539,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":540,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":541,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":542,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":543,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":544,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":545,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":546,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":547,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":548,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":549,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":550,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":551,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":552,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":553,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":554,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":555,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":556,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":557,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":558,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":559,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":560,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":561,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":562,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":563,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":564,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":565,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":566,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":567,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":568,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":569,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":570,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":571,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":572,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":573,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":574,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":575,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":576,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":577,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":578,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":579,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":580,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":581,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":582,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":583,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":584,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":585,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":586,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":587,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":588,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":589,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":590,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":591,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":592,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":593,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":594,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":595,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":596,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":597,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":598,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":599,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":600,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":601,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":602,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":603,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":604,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":605,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":606,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":607,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":608,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":609,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":610,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":611,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":612,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":613,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":614,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":615,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":616,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":617,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":618,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":619,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":620,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":621,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":622,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":623,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":624,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":625,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":626,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":627,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":628,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":629,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":630,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":631,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":632,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":633,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":634,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":635,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":636,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":637,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":638,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":639,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":640,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":641,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":642,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":643,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":644,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":645,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":646,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":647,"column":0},"generated":{"line":648,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":648,"column":0},"generated":{"line":649,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":649,"column":0},"generated":{"line":650,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":650,"column":0},"generated":{"line":651,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":651,"column":0},"generated":{"line":652,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":652,"column":0},"generated":{"line":653,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":653,"column":0},"generated":{"line":654,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":654,"column":0},"generated":{"line":655,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":655,"column":0},"generated":{"line":656,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":656,"column":0},"generated":{"line":657,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":657,"column":0},"generated":{"line":658,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":658,"column":0},"generated":{"line":659,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":659,"column":0},"generated":{"line":660,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":660,"column":0},"generated":{"line":661,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":661,"column":0},"generated":{"line":662,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":662,"column":0},"generated":{"line":663,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":663,"column":0},"generated":{"line":664,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":664,"column":0},"generated":{"line":665,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":665,"column":0},"generated":{"line":666,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":666,"column":0},"generated":{"line":667,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":667,"column":0},"generated":{"line":668,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":668,"column":0},"generated":{"line":669,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":669,"column":0},"generated":{"line":670,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":670,"column":0},"generated":{"line":671,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":671,"column":0},"generated":{"line":672,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":672,"column":0},"generated":{"line":673,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":673,"column":0},"generated":{"line":674,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":674,"column":0},"generated":{"line":675,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":675,"column":0},"generated":{"line":676,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":676,"column":0},"generated":{"line":677,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":677,"column":0},"generated":{"line":678,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":678,"column":0},"generated":{"line":679,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":679,"column":0},"generated":{"line":680,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":680,"column":0},"generated":{"line":681,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":681,"column":0},"generated":{"line":682,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":682,"column":0},"generated":{"line":683,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":683,"column":0},"generated":{"line":684,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":684,"column":0},"generated":{"line":685,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":685,"column":0},"generated":{"line":686,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":686,"column":0},"generated":{"line":687,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":687,"column":0},"generated":{"line":688,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":688,"column":0},"generated":{"line":689,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":689,"column":0},"generated":{"line":690,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":690,"column":0},"generated":{"line":691,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":691,"column":0},"generated":{"line":692,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":692,"column":0},"generated":{"line":693,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":693,"column":0},"generated":{"line":694,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":694,"column":0},"generated":{"line":695,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":695,"column":0},"generated":{"line":696,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":696,"column":0},"generated":{"line":697,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":697,"column":0},"generated":{"line":698,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":698,"column":0},"generated":{"line":699,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":699,"column":0},"generated":{"line":700,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":700,"column":0},"generated":{"line":701,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":701,"column":0},"generated":{"line":702,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":702,"column":0},"generated":{"line":703,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":703,"column":0},"generated":{"line":704,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":704,"column":0},"generated":{"line":705,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":705,"column":0},"generated":{"line":706,"column":0}},{"source":"node_modules/gridplus-sdk/src/ethereum.js","original":{"line":706,"column":0},"generated":{"line":707,"column":0}}],"sources":{"node_modules/gridplus-sdk/src/ethereum.js":"// Utils for Ethereum transactions. This is effecitvely a shim of ethereumjs-util, which\n// does not have browser (or, by proxy, React-Native) support.\nconst BN = require('bignumber.js');\nconst Buffer = require('buffer/').Buffer;\nconst cbor = require('borc');\nconst constants = require('./constants');\nconst ethers = require('ethers');\nconst eip712 = require('ethers-eip712');\nconst keccak256 = require('js-sha3').keccak256;\nconst rlp = require('rlp-browser');\nconst secp256k1 = require('secp256k1');\n\nexports.buildEthereumMsgRequest = function(input) {\n  if (!input.payload || !input.protocol || !input.signerPath)\n    throw new Error('You must provide `payload`, `signerPath`, and `protocol` arguments in the messsage request');\n  if (input.signerPath.length > 5 || input.signerPath.length < 2) \n    throw new Error('Please provide a signer path with 2-5 indices');\n  const req = {\n    schema: constants.signingSchema.ETH_MSG,\n    payload: null,\n    input, // Save the input for later\n    msg: null, // Save the buffered message for later\n  }\n  try {\n    switch (input.protocol) {\n      case 'signPersonal':\n        return buildPersonalSignRequest(req, input)\n      case 'eip712':\n        if (!input.fwConstants.eip712Supported)\n          throw new Error('EIP712 is not supported by your Lattice firmware version. Please upgrade.')\n        return buildEIP712Request(req, input)\n      default:\n        throw new Error('Unsupported protocol');\n    }\n  } catch (err) {\n    return { err: err.toString() }\n  }\n}\n\nexports.validateEthereumMsgResponse = function(res, req) {\n  const { signer, sig } = res;\n  const { input, msg, prehash=null } = req;\n  if (input.protocol === 'signPersonal') {\n    // NOTE: We are currently hardcoding networkID=1 and useEIP155=false but these\n    //       may be configurable in future versions\n    const hash =  prehash ? \n                  prehash : \n                  Buffer.from(keccak256(Buffer.concat([get_personal_sign_prefix(msg.length), msg])), 'hex');\n    return addRecoveryParam(hash, sig, signer, 1, false)\n  } else if (input.protocol === 'eip712') {\n    const digest = prehash ? prehash : eip712.TypedDataUtils.encodeDigest(req.input.payload);\n    return addRecoveryParam(digest, sig, signer)\n  } else {\n    throw new Error('Unsupported protocol');\n  }\n}\n\nexports.buildEthereumTxRequest = function(data) {\n  try {\n    let { chainId=1 } = data;\n    const { signerPath, eip155=null, fwConstants } = data;\n    const { extraDataFrameSz, extraDataMaxFrames, prehashAllowed } = fwConstants;\n    const EXTRA_DATA_ALLOWED = extraDataFrameSz > 0 && extraDataMaxFrames > 0;\n    const MAX_BASE_DATA_SZ = fwConstants.ethMaxDataSz;\n    const VAR_PATH_SZ = fwConstants.varAddrPathSzAllowed;\n\n    // Sanity checks:\n    // There are a handful of named chains we allow the user to reference (`chainIds`)\n    // Custom chainIDs should be either numerical or hex strings\n    if (typeof chainId !== 'number' && isValidChainIdHexNumStr(chainId) === false) \n      chainId = chainIds[chainId];\n    // If this was not a custom chainID and we cannot find the name of it, exit\n    if (!chainId) \n      throw new Error('Unsupported chain ID or name');\n    // Sanity check on signePath\n    if (!signerPath) \n      throw new Error('`signerPath` not provided');\n\n    // Determine if we should use EIP155 given the chainID.\n    // If we are explicitly told to use eip155, we will use it. Otherwise,\n    // we will look up if the specified chainId is associated with a chain\n    // that does not use EIP155 by default. Note that most do use EIP155.\n    let useEIP155 = chainUsesEIP155(chainId);\n    if (eip155 !== null && typeof eip155 === 'boolean')\n      useEIP155 = eip155;\n\n    // Hack for metamask, which sends value=null for 0 ETH transactions\n    if (!data.value)\n      data.value = 0;\n      \n    //--------------\n    // 1. BUILD THE RAW TX FOR FUTURE RLP ENCODING\n    //--------------\n\n    // Ensure all fields are 0x-prefixed hex strings\n    const rawTx = [];\n    // Build the transaction buffer array\n    const nonceBytes = ensureHexBuffer(data.nonce);\n    const gasPriceBytes = ensureHexBuffer(data.gasPrice);\n    const gasLimitBytes = ensureHexBuffer(data.gasLimit);\n    const toBytes = ensureHexBuffer(data.to);\n    const valueBytes = ensureHexBuffer(data.value);\n    const dataBytes = ensureHexBuffer(data.data);\n    rawTx.push(nonceBytes);\n    rawTx.push(gasPriceBytes);\n    rawTx.push(gasLimitBytes);\n    rawTx.push(toBytes);\n    rawTx.push(valueBytes);\n    rawTx.push(dataBytes);\n    // Add empty v,r,s values\n    if (useEIP155 === true) {\n      rawTx.push(ensureHexBuffer(chainId)); // v\n      rawTx.push(ensureHexBuffer(null));    // r\n      rawTx.push(ensureHexBuffer(null));    // s\n    }\n    //--------------\n    // 2. BUILD THE LATTICE REQUEST PAYLOAD\n    //--------------\n    const ETH_TX_NON_DATA_SZ = 122; // Accounts for metadata and non-data params\n    const txReqPayload = Buffer.alloc(MAX_BASE_DATA_SZ + ETH_TX_NON_DATA_SZ);\n    let off = 0;\n    // 1. EIP155 switch and chainID\n    //------------------\n    txReqPayload.writeUInt8(Number(useEIP155), off); off++;\n    // NOTE: Originally we designed for a 1-byte chainID, but modern rollup chains use much larger\n    // chainID values. To account for these, we will put the chainID into the `data` buffer if it\n    // is >=255. Values up to UINT64_MAX will be allowed.\n    let chainIdBuf; \n    let chainIdBufSz = 0;\n    if (useChainIdBuffer(chainId) === true) {\n      chainIdBuf = getChainIdBuf(chainId);\n      chainIdBufSz = chainIdBuf.length;\n      if (chainIdBufSz > constants.MAX_CHAIN_ID_BYTES)\n        throw new Error('ChainID provided is too large.');\n      // Signal to Lattice firmware that it needs to read the chainId from the tx.data buffer\n      txReqPayload.writeUInt8(constants.HANDLE_LARGER_CHAIN_ID, off); off++;\n    } else {\n      // For chainIDs <255, write it to the chainId u8 slot in the main tx buffer\n      chainIdBuf = ensureHexBuffer(chainId);\n      if (chainIdBuf.length !== 1)\n        throw new Error('Error parsing chainID');\n      chainIdBuf.copy(txReqPayload, off); off += chainIdBuf.length;\n    }\n\n    // 2. Signer Path\n    //------------------\n    const signerPathBuf = buildSignerPathBuf(signerPath, VAR_PATH_SZ);\n    signerPathBuf.copy(txReqPayload, off);\n    off += signerPathBuf.length;\n\n    // 3. ETH TX request data\n    //------------------\n    if (nonceBytes.length > 4)\n      throw new Error('Nonce too large');\n    nonceBytes.copy(txReqPayload, off + (4 - nonceBytes.length)); off += 4;\n    if (gasPriceBytes.length > 8)\n      throw new Error('Gas price too large');\n    gasPriceBytes.copy(txReqPayload, off + (8 - gasPriceBytes.length)); off += 8;\n    if (gasLimitBytes.length > 4)\n      throw new Error('Gas limit too large');\n    gasLimitBytes.copy(txReqPayload, off + (4 - gasLimitBytes.length)); off += 4;\n    if (toBytes.length !== 20)\n      throw new Error('Invalid `to` address');\n    toBytes.copy(txReqPayload, off); off += 20;\n    if (valueBytes.length > 32)\n      throw new Error('Value too large');\n    valueBytes.copy(txReqPayload, off + (32 - valueBytes.length)); off += 32;\n    // Flow data into extraData requests, which will follow-up transaction requests, if supported/applicable    \n    const extraDataPayloads = [];\n    let prehash = null;\n    if (dataBytes && dataBytes.length > MAX_BASE_DATA_SZ) {\n      // Determine sizes and run through sanity checks\n      const chainIdExtraSz = chainIdBufSz > 0 ? chainIdBufSz + 1 : 0;\n      const totalSz = dataBytes.length + chainIdExtraSz;\n      const maxSzAllowed = MAX_BASE_DATA_SZ + (extraDataMaxFrames * extraDataFrameSz);\n\n      // Copy the data into a tmp buffer. Account for larger chain ID sizes if applicable.\n      const dataToCopy = Buffer.alloc(dataBytes.length + chainIdExtraSz)\n      if (chainIdExtraSz > 0) {\n        dataToCopy.writeUInt8(chainIdBufSz, 0);\n        chainIdBuf.copy(dataToCopy, 1);\n        dataBytes.copy(dataToCopy, chainIdExtraSz);\n      } else {\n        dataBytes.copy(dataToCopy, 0);\n      }\n\n      if (prehashAllowed && totalSz > maxSzAllowed) {\n        // If this payload is too large to send, but the Lattice allows a prehashed message, do that\n        prehash = Buffer.from(keccak256(rlp.encode(rawTx)), 'hex')\n      } else {\n        if ((!EXTRA_DATA_ALLOWED) || (EXTRA_DATA_ALLOWED && totalSz > maxSzAllowed))\n          throw new Error(`Data field too large (got ${dataBytes.length}; must be <=${maxSzAllowed-chainIdExtraSz} bytes)`);\n        // Split overflow data into extraData frames\n        const frames = splitFrames(dataToCopy.slice(MAX_BASE_DATA_SZ), extraDataFrameSz);\n        frames.forEach((frame) => {\n          const szLE = Buffer.alloc(4);\n          szLE.writeUInt32LE(frame.length);\n          extraDataPayloads.push(Buffer.concat([szLE, frame]));\n        })\n      }\n    }\n    // Write the data size (does *NOT* include the chainId buffer, if that exists)\n    txReqPayload.writeUInt16BE(dataBytes.length, off); off += 2;\n    // Copy in the chainId buffer if needed\n    if (chainIdBufSz > 0) {\n      txReqPayload.writeUInt8(chainIdBufSz, off); off++;\n      chainIdBuf.copy(txReqPayload, off); off += chainIdBufSz;\n    }\n    // Copy the first slice of the data itself. If this payload has been pre-hashed, include it\n    // in the `data` field. This will result in a different Lattice screen being drawn.\n    if (prehash) {\n      prehash.copy(txReqPayload, off); off += MAX_BASE_DATA_SZ;\n    } else {\n      dataBytes.slice(0, MAX_BASE_DATA_SZ).copy(txReqPayload, off); off += MAX_BASE_DATA_SZ;\n    }\n    return {\n      rawTx,\n      payload: txReqPayload.slice(0, off),\n      extraDataPayloads,\n      schema: constants.signingSchema.ETH_TRANSFER,  // We will use eth transfer for all ETH txs for v1 \n      chainId,\n      useEIP155,\n      signerPath,\n    };\n  } catch (err) {\n    return { err: err.message };\n  }\n}\n\n// From ethereumjs-util\nfunction stripZeros(a) {\n  let first = a[0]\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1)\n    first = a[0]\n  }\n  return a\n}\n\n// Given a 64-byte signature [r,s] we need to figure out the v value\n// and attah the full signature to the end of the transaction payload\nexports.buildEthRawTx = function(tx, sig, address, useEIP155=true) {\n  // RLP-encode the data we sent to the lattice\n  const rlpEncoded = rlp.encode(tx.rawTx);\n  const hash = Buffer.from(keccak256(rlpEncoded), 'hex')\n  const newSig = addRecoveryParam(hash, sig, address, tx.chainId, useEIP155);\n  // Use the signature to generate a new raw transaction payload\n  const newRawTx = tx.rawTx.slice(0, 6);\n  newRawTx.push(newSig.v);\n  // Per `ethereumjs-tx`, RLP encoding should include signature components w/ stripped zeros\n  // See: https://github.com/ethereumjs/ethereumjs-tx/blob/master/src/transaction.ts#L187\n  newRawTx.push(stripZeros(newSig.r));\n  newRawTx.push(stripZeros(newSig.s));\n  return rlp.encode(newRawTx).toString('hex');\n}\n\n// Attach a recovery parameter to a signature by brute-forcing ECRecover\nfunction addRecoveryParam(hashBuf, sig, address, chainId, useEIP155) {\n  try {\n    // Rebuild the keccak256 hash here so we can `ecrecover`\n    const hash = new Uint8Array(hashBuf);\n    let v = 0;\n    // Fix signature componenet lengths to 32 bytes each\n    const r = fixLen(sig.r, 32); sig.r = r;\n    const s = fixLen(sig.s, 32); sig.s = s;\n    // Calculate the recovery param\n    const rs = new Uint8Array(Buffer.concat([r, s]));\n    let pubkey = secp256k1.ecdsaRecover(rs, v, hash, false).slice(1)\n    // If the first `v` value is a match, return the sig!\n    if (pubToAddrStr(pubkey) === address.toString('hex')) {\n      sig.v  = getRecoveryParam(v, useEIP155, chainId);\n      return sig;\n    }\n    // Otherwise, try the other `v` value\n    v = 1;\n    pubkey = secp256k1.ecdsaRecover(rs, v, hash, false).slice(1)\n    if (pubToAddrStr(pubkey) === address.toString('hex')) {\n      sig.v  = getRecoveryParam(v, useEIP155, chainId);\n      return sig;\n    } else {\n      // If neither is a match, we should return an error\n      throw new Error('Invalid Ethereum signature returned.');\n    }\n  } catch (err) {\n    throw new Error(err);\n  }\n}\n\n// Convert an RLP-serialized transaction (plus signature) into a transaction hash\nexports.hashTransaction = function(serializedTx) {\n  return keccak256(Buffer.from(serializedTx, 'hex')); \n}\n\n// Returns address string given public key buffer\nfunction pubToAddrStr(pub) {\n  return keccak256(pub).slice(-40);\n}\n\nfunction fixLen(msg, length) {\n  const buf = Buffer.alloc(length)\n  if (msg.length < length) {\n    msg.copy(buf, length - msg.length)\n    return buf\n  }\n  return msg.slice(-length)\n}\n\n// Convert a 0/1 `v` into a recovery param:\n// * For non-EIP155 transactions, return `27 + v`\n// * For EIP155 transactions, return `(CHAIN_ID*2) + 35 + v`\nfunction getRecoveryParam(v, useEIP155, chainId=null) {\n  // If we are not using EIP155, convert v directly to a buffer and return it\n  if (false === useEIP155 || chainId === null)\n    return Buffer.from(new BN(v).plus(27).toString(16), 'hex');\n  // We will use EIP155 in most cases. Convert v to a bignum and operate on it.\n  // Note that the protocol calls for v = (CHAIN_ID*2) + 35/36, where 35 or 36\n  // is decided on based on the ecrecover result. `v` is passed in as either 0 or 1\n  // so we add 35 to that.\n  const chainIdBuf = getChainIdBuf(chainId);\n  const chainIdBN = new BN(chainIdBuf.toString('hex'), 16);\n  return ensureHexBuffer(`0x${chainIdBN.times(2).plus(35).plus(v).toString(16)}`);\n}\n\nfunction isHexStr(str) {\n  return (/^[0-9a-fA-F]+$/).test(str)\n}\n\nfunction isASCIIStr(str) {\n  return (/^[\\x00-\\x7F]+$/).test(str)\n}\n\n// Determine if the Lattice can display a string we give it. Currently, the Lattice can only\n// display ASCII strings, so we will reject other UTF8 codes.\n// In the future we may add a mechanism to display certain UTF8 codes such as popular emojis.\nfunction latticeCanDisplayStr(str) {\n  for (let i = 0; i < str.length; i++)\n    if (str.charCodeAt(i) < 0x0020 || str.charCodeAt(i) > 0x007f)\n      return false;\n  return true;\n}\n\nconst chainIds = {\n  mainnet: 1,\n  roptsten: 3,\n  rinkeby: 4,\n  kovan: 42,\n  goerli: 5\n}\n\n// Get a buffer containing the chainId value.\n// Returns a 1, 2, 4, or 8 byte buffer with the chainId encoded in big endian\nfunction getChainIdBuf(chainId) {\n  let b;\n  // If our chainID is a hex string, we can convert it to a hex\n  // buffer directly\n  if (true === isValidChainIdHexNumStr(chainId))\n    b = ensureHexBuffer(chainId);\n  // If our chainID is a base-10 number, parse with bignumber.js and convert to hex buffer\n  else\n    b = ensureHexBuffer(`0x${new BN(chainId).toString(16)}`);\n  // Make sure the buffer is an allowed size\n  if (b.length > 8)\n    throw new Error('ChainID provided is too large.');\n  // If this matches a u16, u32, or u64 size, return it now\n  if (b.length <= 2 || b.length === 4 || b.length === 8)\n    return b;\n  // For other size buffers, we need to pack into u32 or u64 before returning;\n  let buf;\n  if (b.length === 3) {\n    buf = Buffer.alloc(4);\n    buf.writeUInt32BE(chainId);\n  } else if (b.length <= 8) {\n    buf = Buffer.alloc(8);\n    b.copy(buf, 8 - b.length)\n  }\n  return buf;\n}\n\n// Determine if the chain uses EIP155 by default, based on the chainID\nfunction chainUsesEIP155(chainID) {\n  switch (chainID) {\n    case 3: // ropsten\n    case 4: // rinkeby\n      return false;\n    case 1: // mainnet\n    case 42: // kovan\n    case 5: // goerli\n    default: // all others should use eip155\n      return true;\n  }\n}\n\n// Determine if a valid number was passed in as a hex string\nfunction isValidChainIdHexNumStr(s) {\n  if (typeof s !== 'string')\n    return false;\n  if (s.slice(0, 2) !== '0x')\n    return false;\n  try {\n    const b = new BN(s, 16)\n    return b.isNaN() === false;\n  } catch (err) {\n    return false;\n  }\n}\n\n// If this is a nubmer that fits in one byte, we don't need to add it\n// to the `data` buffer of the main transaction. \n// Note the one edge case: we still need to use the `data` field for chainID=255.\nfunction useChainIdBuffer(id) {\n  const buf = getChainIdBuf(id);\n  if (buf.length === 1)\n    return buf.readUInt8(0) === 255;\n  return true;\n}\n\nexports.chainIds = chainIds;\n\nfunction isBase10NumStr(x) {\n  const bn = new BN(x).toString().split('.').join('');\n  const s = new String(x)\n  // Note that the JS native `String()` loses precision for large numbers, but we only\n  // want to validate the base of the number so we don't care about far out precision.\n  return bn.slice(0, 8) === s.slice(0, 8)\n}\n\n// Ensure a param is represented by a buffer\n// TODO: Remove circular dependency in util.js so that we can put this function there\nfunction ensureHexBuffer(x, zeroIsNull=true) {\n  try {\n    // For null values, return a 0-sized buffer. For most situations we assume\n    // 0 should be represented with a zero-length buffer (e.g. for RLP-building\n    // txs), but it can also be treated as a 1-byte buffer (`00`) if needed\n    if (x === null || (x === 0 && zeroIsNull === true)) \n      return Buffer.alloc(0);\n    const isNumber = typeof x === 'number' || isBase10NumStr(x);\n    // Otherwise try to get this converted to a hex string\n    if (isNumber) {\n      // If this is a number or a base-10 number string, convert it to hex\n      x = `${new BN(x).toString(16)}`;\n    } else if (typeof x === 'string' && x.slice(0, 2) === '0x') {\n      x = x.slice(2);\n    } else {\n      x = x.toString('hex')\n    }\n    if (x.length % 2 > 0) x = `0${x}`;\n    if (x === '00' && !isNumber)\n      return Buffer.alloc(0);\n    return Buffer.from(x, 'hex');\n  } catch (err) {\n    throw new Error(`Cannot convert ${x.toString()} to hex buffer (${err.toString()})`);\n  }\n}\nexports.ensureHexBuffer = ensureHexBuffer;\n\n\nfunction buildPersonalSignRequest(req, input) {\n  const MAX_BASE_MSG_SZ = input.fwConstants.ethMaxMsgSz;\n  const VAR_PATH_SZ = input.fwConstants.varAddrPathSzAllowed;\n  const L = (24) + MAX_BASE_MSG_SZ + 4;\n  let off = 0;\n  req.payload = Buffer.alloc(L);\n  req.payload.writeUInt8(constants.ethMsgProtocol.SIGN_PERSONAL, 0); off += 1;\n  // Write the signer path into the buffer\n  const signerPathBuf = buildSignerPathBuf(input.signerPath, VAR_PATH_SZ);\n  signerPathBuf.copy(req.payload, off);\n  off += signerPathBuf.length;\n  // Write the payload buffer. The payload can come in either as a buffer or as a string\n  let payload = input.payload;\n  // Determine if this is a hex string\n  let displayHex = false;\n  if (typeof input.payload === 'string') {\n    if (input.payload.slice(0, 2) === '0x') {\n      payload = ensureHexBuffer(input.payload)\n      displayHex = false === isASCIIStr(Buffer.from(input.payload.slice(2), 'hex').toString())\n    } else {\n      if (false === latticeCanDisplayStr(input.payload))\n        throw new Error('Currently, the Lattice can only display ASCII strings.');\n      payload = Buffer.from(input.payload)\n    }\n  } else if (typeof input.displayHex === 'boolean') {\n    // If this is a buffer and the user has specified whether or not this\n    // is a hex buffer with the optional argument, write that\n    displayHex = input.displayHex\n  } else {\n    // Otherwise, determine if this buffer is an ASCII string. If it is, set `displayHex` accordingly.\n    // NOTE: THIS MEANS THAT NON-ASCII STRINGS WILL DISPLAY AS HEX SINCE WE CANNOT KNOW IF THE REQUESTER\n    //        EXPECTED NON-ASCII CHARACTERS TO DISPLAY IN A STRING\n    // TODO: Develop a more elegant solution for this\n    if (!input.payload.toString)\n      throw new Error('Unsupported input data type');\n    displayHex = false === isASCIIStr(input.payload.toString())\n  }\n  const fwConst = input.fwConstants;\n  const maxSzAllowed = MAX_BASE_MSG_SZ + (fwConst.extraDataMaxFrames * fwConst.extraDataFrameSz);\n  if (fwConst.ethMsgPreHashAllowed && payload.length > maxSzAllowed) {\n    // If this message will not fit and pre-hashing is allowed, do that\n    req.payload.writeUInt8(displayHex, off); off += 1;\n    req.payload.writeUInt16LE(payload.length, off); off += 2;\n    const prehash = Buffer.from(keccak256(Buffer.concat([get_personal_sign_prefix(payload.length), payload])), 'hex');\n    prehash.copy(req.payload, off);\n    req.prehash = prehash;\n  } else {\n    // Otherwise we can fit the payload.\n    // Flow data into extraData requests, which will follow-up transaction requests, if supported/applicable    \n    const extraDataPayloads = getExtraData(payload, input);\n    // Write the payload and metadata into our buffer\n    req.extraDataPayloads = extraDataPayloads\n    req.msg = payload;\n    req.payload.writeUInt8(displayHex, off); off += 1;\n    req.payload.writeUInt16LE(payload.length, off); off += 2;\n    payload.copy(req.payload, off);\n  }\n  return req;\n}\n\nfunction buildEIP712Request(req, input) {\n  try {\n    const MAX_BASE_MSG_SZ = input.fwConstants.ethMaxMsgSz;\n    const VAR_PATH_SZ = input.fwConstants.varAddrPathSzAllowed;\n    const TYPED_DATA = constants.ethMsgProtocol.TYPED_DATA;\n    const L = (24) + MAX_BASE_MSG_SZ + 4;\n    let off = 0;\n    req.payload = Buffer.alloc(L);\n    req.payload.writeUInt8(TYPED_DATA.enumIdx, 0); off += 1;\n    // Write the signer path\n    const signerPathBuf = buildSignerPathBuf(input.signerPath, VAR_PATH_SZ);\n    signerPathBuf.copy(req.payload, off);\n    off += signerPathBuf.length;\n    // Parse/clean the EIP712 payload, serialize with CBOR, and write to the payload\n    const data = JSON.parse(JSON.stringify(input.payload));\n    if (!data.primaryType || !data.types[data.primaryType])\n      throw new Error('primaryType must be specified and the type must be included.')\n    if (!data.message || !data.domain)\n      throw new Error('message and domain must be specified.')\n    if (0 > Object.keys(data.types).indexOf('EIP712Domain'))\n      throw new Error('EIP712Domain type must be defined.')\n    // Parse the payload to ensure we have valid EIP712 data types and that\n    // they are encoded such that Lattice firmware can parse them.\n    // We need two different encodings:\n    // 1. Use `ethers` BigNumber when building the request to be validated by ethers-eip712.\n    //    Make sure we use a copy of the data to avoid mutation problems\n    input.payload.message = parseEIP712Msg( JSON.parse(JSON.stringify(data.message)), \n                                            JSON.parse(JSON.stringify(data.primaryType)), \n                                            JSON.parse(JSON.stringify(data.types)), \n                                            true);\n    input.payload.domain = parseEIP712Msg( JSON.parse(JSON.stringify(data.domain)), \n                                            'EIP712Domain', \n                                            JSON.parse(JSON.stringify(data.types)), \n                                            true);\n    // 2. Use `bignumber.js` for the request going to the Lattice, since it's the required\n    //    BigNumber lib for `cbor`, which we use to encode the request data to the Lattice.\n    data.domain = parseEIP712Msg(data.domain, 'EIP712Domain', data.types, false);\n    data.message = parseEIP712Msg(data.message, data.primaryType, data.types, false);\n    // Now build the message to be sent to the Lattice\n    const payload = Buffer.from(cbor.encode(data));\n    const fwConst = input.fwConstants;\n    const maxSzAllowed = MAX_BASE_MSG_SZ + (fwConst.extraDataMaxFrames * fwConst.extraDataFrameSz);\n    if (fwConst.ethMsgPreHashAllowed && payload.length > maxSzAllowed) {\n      // If this payload is too large to send, but the Lattice allows a prehashed message, do that\n      req.payload.writeUInt16LE(payload.length, off); off += 2;\n      const prehash = Buffer.from(keccak256(eip712.TypedDataUtils.encodeDigest(req.input.payload), 'hex'), 'hex');\n      prehash.copy(req.payload, off);\n      req.prehash = prehash;\n    } else {\n      const extraDataPayloads = getExtraData(payload, input);\n      req.extraDataPayloads = extraDataPayloads;\n      req.payload.writeUInt16LE(payload.length, off); off += 2;\n      payload.copy(req.payload, off); off += payload.length;\n      // Slice out the part of the buffer that we didn't use.\n      req.payload = req.payload.slice(0, off);\n    }\n    return req;\n  } catch (err) {\n    return { err: `Failed to build EIP712 request: ${err.message}` };\n  }\n}\n\nfunction buildSignerPathBuf(signerPath, varAddrPathSzAllowed) {\n  const buf = Buffer.alloc(24);\n  let off = 0;\n  if (varAddrPathSzAllowed && signerPath.length > 5)\n    throw new Error('Signer path must be <=5 indices.');\n  if (!varAddrPathSzAllowed && signerPath.length !== 5)\n    throw new Error('Your Lattice firmware only supports 5-index derivation paths. Please upgrade.');\n  buf.writeUInt32LE(signerPath.length, off); off += 4;\n  for (let i = 0; i < 5; i++) {\n    if (i < signerPath.length)\n      buf.writeUInt32LE(signerPath[i], off); \n    else\n      buf.writeUInt32LE(0, off);\n    off += 4;\n  }\n  return buf;\n}\n\nfunction getExtraData(payload, input) {\n  const { ethMaxMsgSz, extraDataFrameSz, extraDataMaxFrames } = input.fwConstants;\n  const MAX_BASE_MSG_SZ = ethMaxMsgSz;\n  const EXTRA_DATA_ALLOWED = extraDataFrameSz > 0 && extraDataMaxFrames > 0;\n  const extraDataPayloads = [];\n  if (payload.length > MAX_BASE_MSG_SZ) {\n    // Determine sizes and run through sanity checks\n    const maxSzAllowed = MAX_BASE_MSG_SZ + (extraDataMaxFrames * extraDataFrameSz);\n    if (!EXTRA_DATA_ALLOWED)\n      throw new Error(`Your message is ${payload.length} bytes, but can only be a maximum of ${MAX_BASE_MSG_SZ}`);\n    else if (EXTRA_DATA_ALLOWED && payload.length > maxSzAllowed)\n      throw new Error(`Your message is ${payload.length} bytes, but can only be a maximum of ${maxSzAllowed}`);\n    // Split overflow data into extraData frames\n    const frames = splitFrames(payload.slice(MAX_BASE_MSG_SZ), extraDataFrameSz);\n    frames.forEach((frame) => {\n      const szLE = Buffer.alloc(4);\n      szLE.writeUInt32LE(frame.length);\n      extraDataPayloads.push(Buffer.concat([szLE, frame]));\n    })\n  }\n  return extraDataPayloads;\n}\n\nfunction splitFrames(data, frameSz) {\n  const frames = []\n  const n = Math.ceil(data.length / frameSz);\n  let off = 0;\n  for (let i = 0; i < n; i++) {\n    frames.push(data.slice(off, off + frameSz));\n    off += frameSz;\n  }\n  return frames;\n}\n\nfunction parseEIP712Msg(msg, typeName, types, isEthers=false) {\n  try {\n    const type = types[typeName];\n    type.forEach((item) => {\n      const isCustomType = Object.keys(types).indexOf(item.type) > -1;\n      if (true === isCustomType) {\n        msg[item.name] = parseEIP712Msg(msg[item.name], item.type, types, isEthers)\n      } else {\n        msg[item.name] = parseEIP712Item(msg[item.name], item.type, isEthers)\n      }\n    })\n  } catch (err) {\n    throw new Error(err.message);\n  }\n  return msg;\n}\n\nfunction parseEIP712Item(data, type, isEthers=false) {\n  if (type === 'bytes') {\n    // Variable sized bytes need to be buffer type\n    data = ensureHexBuffer(data);\n  } else if (type.slice(0, 5) === 'bytes') {\n    // Fixed sizes bytes need to be buffer type. We also add some sanity checks.\n    const nBytes = parseInt(type.slice(5));\n    data = ensureHexBuffer(data);\n    if (data.length !== nBytes)\n      throw new Error(`Expected ${type} type, but got ${data.length} bytes`);\n  } else if (type === 'address') {\n    // Address must be a 20 byte buffer\n    data = ensureHexBuffer(data);\n    // Edge case to handle the 0-address\n    if (data.length === 0) {\n      data = Buffer.alloc(20);\n    }\n    if (data.length !== 20)\n      throw new Error(`Address type must be 20 bytes, but got ${data.length} bytes`);\n    // Ethers wants addresses as hex strings\n    if (isEthers === true) {\n      data = `0x${data.toString('hex')}`\n    }\n  } else if ( (constants.ethMsgProtocol.TYPED_DATA.typeCodes[type]) && \n              (type.indexOf('uint') > -1 || type.indexOf('int') > -1)) {\n    let b = ensureHexBuffer(data);\n    // Edge case to handle 0-value bignums\n    if (b.length === 0) {\n      b = Buffer.from('00', 'hex');\n    }\n    // Uint256s should be encoded as bignums.\n    if (isEthers === true) {\n      // `ethers` uses their own BigNumber lib\n      data = ethers.BigNumber.from(`0x${b.toString('hex')}`)\n    } else {\n      // `bignumber.js` is needed for `cbor` encoding, which gets sent to the Lattice and plays\n      // nicely with its firmware cbor lib.\n      // NOTE: If we instantiate a `bignumber.js` object, it will not match what `borc` creates\n      // when run inside of the browser (i.e. MetaMask). Thus we introduce this hack to make sure\n      // we are creating a compatible type.\n      // TODO: Find another cbor lib that is compataible with the firmware's lib in a browser\n      // context. This is surprisingly difficult - I tried several libs and only cbor/borc have\n      // worked (borc is a supposedly \"browser compatible\" version of cbor)\n      data = new cbor.Encoder().semanticTypes[1][0](b.toString('hex'), 16)\n    }\n  } else if (type === 'bool') {\n    // Booleans need to be cast to a u8\n    data = data === true ? 1 : 0;\n  }\n  // Other types don't need to be modified\n  return data;\n}\n\nfunction get_personal_sign_prefix(L) {\n  return Buffer.from(\n    `\\u0019Ethereum Signed Message:\\n${L.toString()}`,\n    'utf-8',\n  );\n}"},"lineCount":707}},"error":null,"hash":"49887bc5bd039b2d67430863286347cd","cacheData":{"env":{}}}