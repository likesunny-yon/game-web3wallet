{"id":"node_modules/@keystonehq/bc-ur-registry/dist/CryptoECKey.js","dependencies":[{"name":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/dist/CryptoECKey.js.map","includedInParent":true,"mtime":1635871978905},{"name":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/src/CryptoECKey.ts","includedInParent":true,"mtime":1635871978905},{"name":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/package.json","includedInParent":true,"mtime":1637150058124},{"name":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/package.json","includedInParent":true,"mtime":1635871978905},{"name":"./lib","loc":{"line":4,"column":22},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/dist/CryptoECKey.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/dist/lib/index.js"},{"name":"./RegistryItem","loc":{"line":5,"column":31},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/dist/CryptoECKey.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/dist/RegistryItem.js"},{"name":"./RegistryType","loc":{"line":6,"column":31},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/dist/CryptoECKey.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/@keystonehq/bc-ur-registry/dist/RegistryType.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CryptoECKey = void 0;\nconst lib_1 = require(\"./lib\");\nconst RegistryItem_1 = require(\"./RegistryItem\");\nconst RegistryType_1 = require(\"./RegistryType\");\nvar Keys;\n(function (Keys) {\n    Keys[Keys[\"curve\"] = 1] = \"curve\";\n    Keys[Keys[\"private\"] = 2] = \"private\";\n    Keys[Keys[\"data\"] = 3] = \"data\";\n})(Keys || (Keys = {}));\nclass CryptoECKey extends RegistryItem_1.RegistryItem {\n    constructor(args) {\n        super();\n        this.getCurve = () => this.curve || 0;\n        this.isPrivateKey = () => this.privateKey || false;\n        this.getData = () => this.data;\n        this.getRegistryType = () => {\n            return RegistryType_1.RegistryTypes.CRYPTO_ECKEY;\n        };\n        this.toDataItem = () => {\n            const map = {};\n            if (this.curve) {\n                map[Keys.curve] = this.curve;\n            }\n            if (this.privateKey !== undefined) {\n                map[Keys.private] = this.privateKey;\n            }\n            map[Keys.data] = this.data;\n            return new lib_1.DataItem(map);\n        };\n        this.data = args.data;\n        this.curve = args.curve;\n        this.privateKey = args.privateKey;\n    }\n}\nexports.CryptoECKey = CryptoECKey;\nCryptoECKey.fromDataItem = (dataItem) => {\n    const map = dataItem.getData();\n    const curve = map[Keys.curve];\n    const privateKey = map[Keys.private];\n    const data = map[Keys.data];\n    if (!data) {\n        throw new Error(`#[ur-registry][CryptoECKey][fn.fromDataItem]: decoded [dataItem][#data.data] is undefined: ${dataItem}`);\n    }\n    return new CryptoECKey({ data, curve, privateKey });\n};\nCryptoECKey.fromCBOR = (_cborPayload) => {\n    const dataItem = lib_1.decodeToDataItem(_cborPayload);\n    return CryptoECKey.fromDataItem(dataItem);\n};\n"},"sourceMaps":{"js":{"version":3,"file":"CryptoECKey.js","sourceRoot":"","sources":["../src/CryptoECKey.ts"],"names":[],"mappings":";;;AAAA,+BAAmD;AACnD,iDAA8C;AAC9C,iDAA+C;AAE/C,IAAK,IAIJ;AAJD,WAAK,IAAI;IACP,iCAAS,CAAA;IACT,qCAAO,CAAA;IACP,+BAAI,CAAA;AACN,CAAC,EAJI,IAAI,KAAJ,IAAI,QAIR;AAED,MAAa,WAAY,SAAQ,2BAAY;IAI3C,YAAY,IAA4D;QACtE,KAAK,EAAE,CAAC;QAMH,aAAQ,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;QACjC,iBAAY,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,IAAI,KAAK,CAAC;QAC9C,YAAO,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC;QAEjC,oBAAe,GAAG,GAAG,EAAE;YACrB,OAAO,4BAAa,CAAC,YAAY,CAAC;QACpC,CAAC,CAAC;QAEF,eAAU,GAAG,GAAG,EAAE;YAChB,MAAM,GAAG,GAAG,EAAE,CAAC;YACf,IAAI,IAAI,CAAC,KAAK,EAAE;gBACd,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;aAC9B;YACD,IAAI,IAAI,CAAC,UAAU,KAAK,SAAS,EAAE;gBACjC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC;aACrC;YACD,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;YAC3B,OAAO,IAAI,cAAQ,CAAC,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC;QAvBA,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;IACpC,CAAC;;AATH,kCAgDC;AAjBQ,wBAAY,GAAG,CAAC,QAAkB,EAAE,EAAE;IAC3C,MAAM,GAAG,GAAG,QAAQ,CAAC,OAAO,EAAE,CAAC;IAC/B,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9B,MAAM,UAAU,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACrC,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5B,IAAI,CAAC,IAAI,EAAE;QACT,MAAM,IAAI,KAAK,CACb,8FAA8F,QAAQ,EAAE,CACzG,CAAC;KACH;IACD,OAAO,IAAI,WAAW,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,CAAC;AACtD,CAAC,CAAC;AAEY,oBAAQ,GAAG,CAAC,YAAoB,EAAE,EAAE;IAChD,MAAM,QAAQ,GAAG,sBAAgB,CAAC,YAAY,CAAC,CAAC;IAChD,OAAO,WAAW,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;AAC5C,CAAC,CAAC","sourcesContent":["import { decodeToDataItem, DataItem } from './lib';\nimport { RegistryItem } from './RegistryItem';\nimport { RegistryTypes } from './RegistryType';\n\nenum Keys {\n  curve = 1,\n  private,\n  data,\n}\n\nexport class CryptoECKey extends RegistryItem {\n  private data: Buffer;\n  private curve: number;\n  private privateKey: boolean;\n  constructor(args: { data: Buffer; curve?: number; privateKey?: boolean }) {\n    super();\n    this.data = args.data;\n    this.curve = args.curve;\n    this.privateKey = args.privateKey;\n  }\n\n  public getCurve = () => this.curve || 0;\n  public isPrivateKey = () => this.privateKey || false;\n  public getData = () => this.data;\n\n  getRegistryType = () => {\n    return RegistryTypes.CRYPTO_ECKEY;\n  };\n\n  toDataItem = () => {\n    const map = {};\n    if (this.curve) {\n      map[Keys.curve] = this.curve;\n    }\n    if (this.privateKey !== undefined) {\n      map[Keys.private] = this.privateKey;\n    }\n    map[Keys.data] = this.data;\n    return new DataItem(map);\n  };\n\n  static fromDataItem = (dataItem: DataItem) => {\n    const map = dataItem.getData();\n    const curve = map[Keys.curve];\n    const privateKey = map[Keys.private];\n    const data = map[Keys.data];\n    if (!data) {\n      throw new Error(\n        `#[ur-registry][CryptoECKey][fn.fromDataItem]: decoded [dataItem][#data.data] is undefined: ${dataItem}`,\n      );\n    }\n    return new CryptoECKey({ data, curve, privateKey });\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return CryptoECKey.fromDataItem(dataItem);\n  };\n}\n"]}},"error":null,"hash":"a7c7ed6b3ad0d9c2e4538a94e201e669","cacheData":{"env":{}}}