{"id":"node_modules/gridplus-sdk/src/client.js","dependencies":[{"name":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/package.json","includedInParent":true,"mtime":1637150058124},{"name":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/package.json","includedInParent":true,"mtime":1635871971437},{"name":"bitwise","loc":{"line":1,"column":24},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/client.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/bitwise/esm/index.js"},{"name":"superagent","loc":{"line":2,"column":27},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/client.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/superagent/lib/client.js"},{"name":"./bitcoin","loc":{"line":3,"column":24},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/client.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/bitcoin.js"},{"name":"./ethereum","loc":{"line":4,"column":25},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/client.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/ethereum.js"},{"name":"./ethereumAbi","loc":{"line":5,"column":65},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/client.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/ethereumAbi.js"},{"name":"./util","loc":{"line":19,"column":12},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/client.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/util.js"},{"name":"./constants","loc":{"line":33,"column":12},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/client.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/constants.js"},{"name":"buffer/","loc":{"line":34,"column":23},"parent":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/gridplus-sdk/src/client.js","resolved":"/home/ryann/Documents/Repos/ChainSafe/Gaming/game-web3mobile/node_modules/buffer/index.js"}],"generated":{"js":"\nconst bitwise = require('bitwise');\nconst superagent = require('superagent');\nconst bitcoin = require('./bitcoin');\nconst ethereum = require('./ethereum');\nconst { buildAddAbiPayload, abiParsers, MAX_ABI_DEFS } = require('./ethereumAbi');\nconst {\n  isValidAssetPath,\n  isValidCoinType,\n  signReqResolver,\n  aes256_decrypt,\n  aes256_encrypt,\n  parseDER,\n  checksum,\n  ensureHexBuffer,\n  getP256KeyPair,\n  getP256KeyPairFromPub,\n  parseLattice1Response,\n  toPaddedDER,\n} = require('./util');\nconst {\n  getFwVersionConst,\n  ADDR_STR_LEN,\n  ENC_MSG_LEN,\n  decResLengths,\n  deviceCodes,\n  encReqCodes,\n  responseCodes,\n  REQUEST_TYPE_BYTE,\n  VERSION_BYTE,\n  messageConstants,\n  BASE_URL,\n  signingSchema,\n} = require('./constants');\nconst Buffer = require('buffer/').Buffer;\nconst EMPTY_WALLET_UID = Buffer.alloc(32);\n\nclass Client {\n  constructor({ baseUrl, crypto, name, privKey, timeout, retryCount } = {}) {\n    // Definitions\n    // if (!baseUrl) throw new Error('baseUrl is required');\n    if (name && name.length > 24) throw new Error('name must be less than 24 characters');\n    if (!crypto) throw new Error('crypto provider is required');\n    this.baseUrl = baseUrl || BASE_URL;\n    this.crypto = crypto;\n    this.name = name || 'Unknown';\n    \n    // Derive an ECDSA keypair using the p256 curve. The public key will\n    // be used as an identifier\n    this.privKey = privKey || this.crypto.randomBytes(32);\n    this.key = getP256KeyPair(this.privKey);//.encode('hex');\n\n    // Stateful params\n    this.ephemeralPub = null;\n    this.sharedSecret = null;\n    this.timeout = timeout || 60000;\n    this.deviceId = null;\n    this.isPaired = false;\n    this.retryCount = retryCount || 3;\n\n    // Information about the current wallet. Should be null unless we know a wallet is present\n    this.activeWallets = {\n      internal: {\n        uid: EMPTY_WALLET_UID,           // 32 byte id\n        name: null,                      // 20 char (max) string\n        capabilities: null,              // 4 byte flag\n        external: false,\n      },\n      external: {\n        uid: EMPTY_WALLET_UID,           // 32 byte id\n        name: null,                      // 20 char (max) string\n        capabilities: null,              // 4 byte flag\n        external: true,\n      }\n    }\n  }\n  \n  //=======================================================================\n  // LATTICE FUNCTIONS\n  //=======================================================================\n\n  // `Connect` will attempt to contact a device based on its deviceId.\n  // The response should include an ephemeral public key, which is used to\n  // pair with the device in a later request\n  connect(deviceId, cb) {\n    // User may \"re-connect\" if a device ID has previously been stored\n    if (typeof deviceId === 'function') {\n      if (!this.deviceId) \n        return cb('No device ID has been stored. Please connect with your device ID first.')\n      cb = deviceId;\n    } else {\n      // If the user passes in a device ID, connect to that device and save\n      // the new ID for future use.\n      this.deviceId = deviceId;\n    }\n    const param = this._buildRequest(deviceCodes.CONNECT, this.pubKeyBytes());\n    this._request(param, (err, res) => {\n      if (err) return cb(err);\n      this.isPaired = this._handleConnect(res) || false;\n      // Check for an active wallet. This will get bypassed if we are not paired.\n      if (this.isPaired) {\n        this._getActiveWallet((err) => {\n          return cb(err, this.isPaired);\n        }, true);\n      } else {\n        return cb(null);\n      }\n      \n    });\n  }\n\n  pair(pairingSecret, cb) {\n    // Build the secret hash from the salt\n    const pubKey = this.pubKeyBytes();\n    const nameBuf = Buffer.alloc(25);\n    if (this.name.length > 24) {\n      return cb('Name is too many characters. Please change it to <25 characters.');\n    }\n    nameBuf.write(this.name);\n    // Make sure we add a null termination byte to the pairing secret\n    const preImage = Buffer.concat([pubKey, nameBuf, Buffer.from(pairingSecret)]);\n    const hash = this.crypto.createHash('sha256').update(preImage).digest();\n    const sig = this.key.sign(hash); // returns an array, not a buffer\n    const derSig = toPaddedDER(sig);\n    const payload = Buffer.concat([nameBuf, derSig]);\n\n    // Build the request\n    const param = this._buildEncRequest(encReqCodes.FINALIZE_PAIRING, payload);\n    this._request(param, (err, res) => {\n      if (err) return cb(err);\n      // Recover the ephemeral key\n      const errStr = this._handlePair(res);\n      if (errStr) return cb(errStr);\n      // Try to get the active wallet once pairing is successful\n      this._getActiveWallet((err) => {\n        if (err) return cb(err);\n        return cb(null, this.hasActiveWallet());\n      }, true);\n    })  \n  }\n\n  test(data, cb) {\n    if (!data.payload)\n      return cb('First argument must contain `testID` and `payload` fields.');\n    const TEST_DATA_SZ = 500;\n    const payload = Buffer.alloc(TEST_DATA_SZ + 6);\n    payload.writeUInt32BE(data.testID, 0);\n    payload.writeUInt16BE(data.payload.length, 4);\n    data.payload.copy(payload, 6);\n    const param = this._buildEncRequest(encReqCodes.TEST, payload);\n    this._request(param, (err, res) => {\n      if (err) return cb(err);\n      const decrypted = this._handleEncResponse(res, decResLengths.test);\n      if (decrypted.err !== null ) \n        return cb(decrypted.err);\n      return cb(null, decrypted.data.slice(65)); // remove ephem pub\n    })\n  }\n\n  getAddresses(opts, cb) {\n    const SKIP_CACHE_FLAG = 1;\n    const MAX_ADDR = 10;\n    const { startPath, n, skipCache=true } = opts;\n    if (startPath === undefined || n === undefined)\n      return cb('Please provide `startPath` and `n` options');\n    if (startPath.length < 2 || startPath.length > 5)\n      return cb('Path must include between 2 and 5 indices');\n    if (n > MAX_ADDR)\n      return cb(`You may only request ${MAX_ADDR} addresses at once.`);\n\n    if ((skipCache === false && false === isValidAssetPath(startPath)) ||\n        (skipCache === true && false === isValidCoinType(startPath)) )\n      return cb('Parent path is not supported');\n\n    const fwConstants = getFwVersionConst(this.fwVersion);\n    let sz = 32 + 20 + 1; // walletUID + 5 u32 indices + count/flag\n    if (fwConstants.varAddrPathSzAllowed) {\n      sz += 1;  // pathDepth\n    } else if (startPath.length !== 5) {\n      return cb('Your Lattice firmware only supports derivation paths with 5 indices. Please upgrade.')\n    }\n    const payload = Buffer.alloc(sz);\n    let off = 0;\n\n    // WalletUID\n    const wallet = this.getActiveWallet();\n    if (wallet === null) return cb('No active wallet.');\n    wallet.uid.copy(payload, off); off += 32;\n    // Build the start path (5x u32 indices)\n    if (fwConstants.varAddrPathSzAllowed) {\n      payload.writeUInt8(startPath.length, off);\n      off += 1;\n    }\n    for (let i = 0; i < 5; i++) {\n      if (i <= startPath.length)\n        payload.writeUInt32BE(startPath[i], off);\n      off += 4;\n    }\n    // Specify the number of subsequent addresses to request.\n    // We also allow the user to skip the cache and request any address related to the asset\n    // in the wallet.\n    let val;\n    if (true === fwConstants.addrFlagsAllowed) {\n      const flag = skipCache === true ? bitwise.nibble.read(SKIP_CACHE_FLAG) : bitwise.nibble.read(0);\n      const count = bitwise.nibble.read(n);\n      val = bitwise.byte.write(flag.concat(count));\n    } else {\n      val = n;\n    }\n    payload.writeUInt8(val, off); off++;\n    const param = this._buildEncRequest(encReqCodes.GET_ADDRESSES, payload);\n    return this._request(param, (err, res) => {\n      if (err) return cb(err);\n      const parsedRes = this._handleGetAddresses(res);\n      if (parsedRes.err) return cb(parsedRes.err);\n      return cb(null, parsedRes.data);\n    })\n  }\n\n  sign(opts, cb, cachedData=null, nextCode=null) {\n    const { currency } = opts;\n    let { data } = opts;\n    if (currency === undefined || data === undefined) {\n      return cb('Please provide `currency` and `data` options');\n    } else if (signReqResolver[currency] === undefined) {\n      return cb('Unsupported currency');\n    }\n    // All transaction requests must be put into the same sized buffer.\n    // This comes from sizeof(GpTransactionRequest_t), but note we remove\n    // the 2-byte schemaId since it is not returned from our resolver.\n    // Note that different firmware versions may have different data sizes.\n    const fwConstants = getFwVersionConst(this.fwVersion);\n    // Build the signing request payload to send to the device. If we catch\n    // bad params, return an error instead\n    data = { fwConstants, ...data};\n    let req, reqPayload;\n    let schema;\n    if (cachedData !== null && nextCode !== null) {\n      req = cachedData;\n      reqPayload = Buffer.concat([nextCode, req.extraDataPayloads.shift()])\n      schema = signingSchema.EXTRA_DATA;\n    } else {\n      req = signReqResolver[currency](data);\n      if (req.err !== undefined) return cb(req.err);\n      if (req.payload.length > fwConstants.reqMaxDataSz)\n        return cb('Transaction is too large');\n      reqPayload = req.payload;\n      schema = req.schema;\n    }\n\n    // Build the payload\n    const payload = Buffer.alloc(2 + fwConstants.reqMaxDataSz);\n    let off = 0;\n    // Whether there will be follow up requests\n    const hasExtraPayloads = req.extraDataPayloads && Number(req.extraDataPayloads.length > 0);\n    payload.writeUInt8(hasExtraPayloads, off); off += 1;  \n    // Copy request schema (e.g. ETH or BTC transfer)\n    payload.writeUInt8(schema, off); off += 1;\n    // Copy the wallet UID\n    const wallet = this.getActiveWallet();\n    if (wallet === null) return cb('No active wallet.');\n    wallet.uid.copy(payload, off); off += wallet.uid.length;\n    // Build data based on the type of request\n    // Copy the payload of the request\n    reqPayload.copy(payload, off);\n    // Construct the encrypted request and send it\n    const param = this._buildEncRequest(encReqCodes.SIGN_TRANSACTION, payload);\n    return this._request(param, (err, res, responseCode) => {\n      if (responseCode === responseCodes.RESP_ERR_WALLET_NOT_PRESENT) {\n        // If we catch a case where the wallet has changed, try getting the new active wallet\n        // and recursively make the original request.\n        this._getActiveWallet((err) => {\n          if (err) return cb(err)\n          else     return this.sign(opts, cb, cachedData, nextCode);\n        })\n      } else if (err) {\n        // If there was another error caught, return it\n        if (err) return cb(err);\n      } else if (hasExtraPayloads) {\n        const decrypted = this._handleEncResponse(res, decResLengths.sign);\n        nextCode = decrypted.data.slice(65, 73);\n        if (!cachedData)\n          cachedData = req;\n        return this.sign(opts, cb, cachedData, nextCode);\n      } else {\n        // Correct wallet and no errors -- handle the response\n        const parsedRes = this._handleSign(res, currency, req);\n        return cb(parsedRes.err, parsedRes.data);\n      }\n    })\n  }\n\n  addAbiDefs(defs, cb, nextCode=null) {\n    const defsToAdd = defs.slice(0, MAX_ABI_DEFS);\n    defs = defs.slice(MAX_ABI_DEFS);\n    let abiPayload;\n    try {\n      abiPayload = buildAddAbiPayload(defsToAdd);\n    } catch (err) {\n      return cb(err);\n    }\n    const payload = Buffer.alloc(abiPayload.length + 10);\n    // Let the firmware know how many defs are remaining *after this one*.\n    // If this is a positive number, firmware will send us a temporary code\n    // to bypass user authorization if the user has configured easy ABI loading.\n    payload.writeUInt16LE(defs.length);\n    // If this is a follow-up request, we don't need to ask for user authorization\n    // if we use the correct temporary u64\n    if (nextCode !== null)\n      nextCode.copy(payload, 2);\n    abiPayload.copy(payload, 10);\n    const param = this._buildEncRequest(encReqCodes.ADD_ABI_DEFS, payload);\n    return this._request(param, (err, res, responseCode) => {\n      if (responseCode && responseCode !== responseCodes.RESP_SUCCESS)\n        return cb('Error making request.');\n      else if (err)\n        return cb(err);\n      const decrypted = this._handleEncResponse(res, decResLengths.addAbiDefs);\n      // Grab the 8 byte code to fast track our next request, if needed\n      nextCode = decrypted.data.slice(65, 73); \n      // No defs left? Return success\n      if (defs.length === 0)\n        return cb(null);\n      // Add the next set\n      this.addAbiDefs(defs, cb, nextCode, defs);\n    })\n  }\n  \n  addPermissionV0(opts, cb) {\n    const { currency, timeWindow, limit, decimals, asset } = opts;\n    if (!currency || timeWindow === undefined || limit === undefined || decimals === undefined ||\n        timeWindow === null || limit === null || decimals === null)\n      return cb('currency, timeWindow, decimals, and limit are all required options.');\n    else if (timeWindow === 0 || limit === 0)\n      return cb('Time window and spending limit must be positive.');\n    // Build the name of the permission\n    let name = currency;\n    if (asset)\n      name += `_${asset}`;\n    // Start building the payload\n    const payload = Buffer.alloc(293);\n    // Copy the name\n    if (Buffer.from(name).length > 255)\n      return cb('Asset name too long.');\n    Buffer.from(name).copy(payload, 0);\n    // Convert the limit to a 32 byte hex buffer and copy it in\n    const limitBuf = ensureHexBuffer(limit)\n    if (limitBuf.length > 32)\n      return cb('Limit too large.');\n    limitBuf.copy(payload, 256 + (32 - limitBuf.length));\n    // Copy the time window (seconds)\n    payload.writeUInt32BE(timeWindow, 288);\n    payload.writeUInt8(decimals, 292);\n    // Encrypt the request and send it to the Lattice.\n    const param = this._buildEncRequest(encReqCodes.ADD_PERMISSION_V0, payload);\n    return this._request(param, (err, res, responseCode) => {\n      if (responseCode === responseCodes.RESP_ERR_WALLET_NOT_PRESENT) {\n        // If we catch a case where the wallet has changed, try getting the new active wallet\n        // and recursively make the original request.\n        this._getActiveWallet((err) => {\n          if (err) return cb(err)\n          else     return this.addPermissionV0(opts, cb);\n        })\n      } else if (err) {\n        // If there was another error caught, return it\n        if (err) return cb(err);\n      } else {\n        // Correct wallet and no errors -- handle the response\n        const d = this._handleEncResponse(res, decResLengths.finalizePair);\n        if (d.err)\n          return cb(d.err);\n        return cb(null);\n      }\n    })\n  }\n\n  //=======================================================================\n  // INTERNAL FUNCTIONS\n  // These handle the logic around building requests and consuming\n  // responses. They take into account the Lattice's serialization scheme\n  // among other protocols.\n  //=======================================================================\n\n  // Get the active wallet in the device. If we already have one recorded,\n  // we don't need to do anything\n  // returns cb(err) -- err is a string\n  _getActiveWallet(cb, forceRefresh=false) {\n    if (forceRefresh !== true && (this.hasActiveWallet() === true || this.isPaired !== true)) {\n      // If the active wallet already exists, or if we are not paired, skip the request\n      return cb(null);\n    } else {\n      // No active wallet? Get it from the device\n      const payload = Buffer.alloc(0);\n      const param = this._buildEncRequest(encReqCodes.GET_WALLETS, payload);\n      return this._request(param, (err, res) => {\n        if (err) {\n          this._resetActiveWallets();\n          return cb(err);\n        }\n        return cb(this._handleGetWallets(res));\n      })\n    }\n  }\n\n  // Get the shared secret, derived via ECDH from the local private key\n  // and the ephemeral public key\n  // @returns Buffer\n  _getSharedSecret() {\n    // Once every ~256 attempts, we will get a key that starts with a `00` byte, which\n    // can lead to problems initializing AES if we don't force a 32 byte BE buffer.\n    return Buffer.from(this.key.derive(this.ephemeralPub.getPublic()).toArray('be', 32));\n  }\n\n  // Get the ephemeral id, which is the first 4 bytes of the shared secret\n  // generated from the local private key and the ephemeral public key from\n  // the device.\n  // @returns Buffer\n  _getEphemId() {\n    if (this.ephemeralPub === null) return null;\n    // EphemId is the first 4 bytes of the hash of the shared secret\n    const secret = this._getSharedSecret();\n    const hash = this.crypto.createHash('sha256').update(secret).digest();\n    return hash.slice(0, 4);\n  }\n\n  _buildEncRequest(enc_request_code, payload) {\n    // Get the ephemeral id - all encrypted requests require there to be an\n    // epehemeral public key in order to send\n    const ephemId = parseInt(this._getEphemId().toString('hex'), 16)\n    \n    // Build the payload and checksum\n    const payloadPreCs = Buffer.concat([Buffer.from([enc_request_code]), payload]);\n    const cs = checksum(payloadPreCs);\n    const payloadBuf = Buffer.alloc(payloadPreCs.length + 4);\n\n    // Lattice validates checksums in little endian\n    payloadPreCs.copy(payloadBuf, 0);\n    payloadBuf.writeUInt32LE(cs, payloadPreCs.length);\n    // Encrypt this payload\n    const secret = this._getSharedSecret();\n    const newEncPayload = aes256_encrypt(payloadBuf, secret);\n\n    // Write to the overall payload. We must use the same length\n    // for every encrypted request and must include a 32-bit ephemId\n    // along with the encrypted data\n    const newPayload = Buffer.alloc(ENC_MSG_LEN + 4);\n    // First 4 bytes are the ephemeral id (in little endian)\n    newPayload.writeUInt32LE(ephemId, 0);\n    // Next N bytes\n    newEncPayload.copy(newPayload, 4);\n    return this._buildRequest(deviceCodes.ENCRYPTED_REQUEST, newPayload);\n  \n  }\n\n  // Build a request to send to the device.\n  // @param [request_code] {uint8}  - 8-bit unsigned integer representing the message request code\n  // @param [id] {buffer} - 4 byte identifier (comes from HSM for subsequent encrypted reqs)\n  // @param [payload] {buffer} - serialized payload\n  // @returns {buffer}\n  _buildRequest(request_code, payload) {\n    // Length of payload;\n    // we add 1 to the payload length to account for the request_code byte\n    let L = payload && Buffer.isBuffer(payload) ? payload.length + 1 : 1;\n    if (request_code === deviceCodes.ENCRYPTED_REQUEST) {\n      L = 1 + payload.length;\n    }\n    let i = 0;\n    const preReq = Buffer.alloc(L + 8);\n    // Build the header\n    i = preReq.writeUInt8(VERSION_BYTE, i);\n    i = preReq.writeUInt8(REQUEST_TYPE_BYTE, i);\n    const id = this.crypto.randomBytes(4);\n    i = preReq.writeUInt32BE(parseInt(`0x${id.toString('hex')}`), i);\n    i = preReq.writeUInt16BE(L, i);\n    // Build the payload\n    i = preReq.writeUInt8(request_code, i);\n    if (L > 1) i = payload.copy(preReq, i);\n    // Add the checksum\n    const cs = checksum(preReq);\n    const req = Buffer.alloc(preReq.length + 4); // 4-byte checksum\n    i = preReq.copy(req);\n    req.writeUInt32BE(cs, i);\n    return req;\n  }\n\n  _request(data, cb, retryCount=this.retryCount) {\n    if (!this.deviceId) return cb('Serial is not set. Please set it and try again.');\n    const url = `${this.baseUrl}/${this.deviceId}`;\n    superagent.post(url).timeout(this.timeout)\n    .send({data})\n    .then(res => {\n      if (!res || !res.body) return cb(`Invalid response: ${res}`)\n      else if (res.body.status !== 200) return cb(`Error code ${res.body.status}: ${res.body.message}`)\n      const parsed = parseLattice1Response(res.body.message);\n      // If the device is busy, retry if we can\n      if (( parsed.responseCode === responseCodes.RESP_ERR_DEV_BUSY ||\n            parsed.responseCode === responseCodes.RESP_ERR_GCE_TIMEOUT ) \n            && (retryCount > 0)) {\n        return setTimeout(() => { this._request(data, cb, retryCount-1) }, 3000);\n      }\n      // If we caugh a `ErrWalletNotPresent` make sure we aren't caching an old ative walletUID\n      if (parsed.responseCode === responseCodes.RESP_ERR_WALLET_NOT_PRESENT) \n        this._resetActiveWallets();\n      // If there was an error in the response, return it\n      if (parsed.err) \n        return cb(parsed.err);\n      return cb(null, parsed.data, parsed.responseCode); \n    })\n    .catch((err) => {\n      const isTimeout = err.code === 'ECONNABORTED' && err.errno === 'ETIME';\n      if (isTimeout)\n        return cb('Timeout waiting for device. Please ensure it is connected to the internet and try again in a minute.')\n      else\n        return cb('Failed to make request to device.');\n    });\n  }\n\n  // ----- Device response handlers -----\n\n  // Connect will call `StartPairingMode` on the device, which gives the\n  // user 60 seconds to finalize the pairing\n  // This will return an ephemeral public key, which is needed for the next\n  // request. If the device is already paired, this ephemPub is simply used\n  // to encrypt the next request. If the device is not paired, it is needed\n  // to pair the device within 60 seconds.\n  // @returns true if we are paired to the device already\n  _handleConnect(res) {\n    let off = 0;\n    const pairingStatus = res.readUInt8(off); off++;\n    // If we are already paired, we get the next ephemeral key\n    const pub = res.slice(off, off + 65).toString('hex'); off += 65;\n    // Grab the firmware version (will be 0-length for older fw versions)\n    // It is of format |fix|minor|major|reserved|\n    this.fwVersion = res.slice(off, off + 4);\n    // Set the public key\n    this.ephemeralPub = getP256KeyPairFromPub(pub);\n    // return the state of our pairing\n    return (pairingStatus === messageConstants.PAIRED);\n  }\n\n  // All encrypted responses must be decrypted with the previous shared secret. Per specification,\n  // decrypted responses will all contain a 65-byte public key as the prefix, which becomes the \n  // new ephemeralPub.\n  _handleEncResponse(encRes, len) {\n    // Decrypt response\n    const secret = this._getSharedSecret();\n    const encData = encRes.slice(0, ENC_MSG_LEN);\n    const res = aes256_decrypt(encData, secret);\n    // len does not include a 65-byte pubkey that prefies each encResponse\n    len += 65;\n    // Validate checksum. It will be the last 4 bytes of the decrypted payload.\n    // The length of the decrypted payload will be fixed for each given message type.\n    const toCheck = res.slice(0, len);\n    const cs = parseInt(`0x${res.slice(len, len+4).toString('hex')}`);\n    const csCheck = checksum(toCheck);\n    if (cs !== csCheck) return { err: `Checksum mismatch in response from Lattice (calculated ${csCheck}, wanted ${cs})` };\n\n    // First 65 bytes is the next ephemeral pubkey\n    const pub = res.slice(0, 65).toString('hex');\n    try {\n      this.ephemeralPub = getP256KeyPairFromPub(pub);\n      return { err: null, data: res };\n    } catch (e) {\n      return { err: `Error handling getAddresses response: ${e.toString()}` };\n    }\n  }\n\n  // Pair will create a new pairing if the user successfully enters the secret\n  // into the device in time. If successful (status=0), the device will return\n  // a new ephemeral public key, which is used to derive a shared secret\n  // for the next request\n  // @returns error (or null)\n  _handlePair(encRes) {\n    const d = this._handleEncResponse(encRes, decResLengths.finalizePair);\n    if (d.err) return d.err;\n    // Remove the pairing salt - we're paired!\n    this.pairingSalt = null;\n    this.isPaired = true;\n    return null;\n  }\n\n  // GetAddresses will return an array of address strings\n  _handleGetAddresses(encRes) {\n    // Handle the encrypted response\n    const decrypted = this._handleEncResponse(encRes, decResLengths.getAddresses);\n    if (decrypted.err !== null ) return decrypted;\n\n    const addrData = decrypted.data;\n    let off = 65; // Skip 65 byte pubkey prefix\n    // Look for addresses until we reach the end (a 4 byte checksum)\n    const addrs = [];\n    while (off + 4 < decResLengths.getAddresses) {\n      const addrBytes = addrData.slice(off, off+ADDR_STR_LEN); off += ADDR_STR_LEN;\n      // Return the UTF-8 representation\n      const len = addrBytes.indexOf(0); // First 0 is the null terminator\n      if (len > 0)\n        addrs.push(addrBytes.slice(0, len).toString());\n    }\n    return { data: addrs, err: null };\n  }\n\n  _handleGetWallets(encRes) {\n    const decrypted = this._handleEncResponse(encRes, decResLengths.getWallets);\n    if (decrypted.err !== null) return decrypted;\n    const res = decrypted.data;\n    let walletUID;\n    // Read the external wallet data first. If it is non-null, the external wallet will\n    // be the active wallet of the device and we should save it.\n    // If the external wallet is blank, it means there is no card present and we should \n    // save and use the interal wallet.\n    // If both wallets are empty, it means the device still needs to be set up.\n    const walletDescriptorLen = 71;\n    // Skip 65byte pubkey prefix. WalletDescriptor contains 32byte id + 4byte flag + 35byte name\n    let off = 65;\n    // Internal first\n    let hasActiveWallet = false;\n    walletUID = res.slice(off, off+32);\n    this.activeWallets.internal.uid = walletUID;\n    this.activeWallets.internal.capabilities = res.readUInt32BE(off+32);\n    this.activeWallets.internal.name = res.slice(off+36, off+walletDescriptorLen);\n    if (!walletUID.equals(EMPTY_WALLET_UID))\n      hasActiveWallet = true;\n\n    // Offset the first item\n    off += walletDescriptorLen;\n    \n    // External\n    walletUID = res.slice(off, off+32);\n    this.activeWallets.external.uid = walletUID;\n    this.activeWallets.external.capabilities = res.readUInt32BE(off+32);\n    this.activeWallets.external.name = res.slice(off+36, off+walletDescriptorLen);\n    if (!walletUID.equals(EMPTY_WALLET_UID))\n      hasActiveWallet = true;\n    if (hasActiveWallet === true)\n      return null;\n    else\n      return 'No active wallet.';\n  }\n\n  _handleSign(encRes, currencyType, req=null) {\n    // Handle the encrypted response\n    const decrypted = this._handleEncResponse(encRes, decResLengths.sign);\n    if (decrypted.err !== null ) return { err: decrypted.err };\n    const PUBKEY_PREFIX_LEN = 65;\n    const PKH_PREFIX_LEN = 20;\n    let off = PUBKEY_PREFIX_LEN; // Skip past pubkey prefix\n    const res = decrypted.data;\n\n    // Get the change data if we are making a BTC transaction\n    let changeRecipient;\n    if (currencyType === 'BTC') {\n      const changeVersion = bitcoin.addressVersion[req.changeData.changeVersion];\n      const changePubkeyhash = res.slice(off, off + PKH_PREFIX_LEN); off += PKH_PREFIX_LEN;\n      changeRecipient = bitcoin.getBitcoinAddress(changePubkeyhash, changeVersion);\n    }\n    // Start building return data\n    const returnData = { err: null, data: null };\n    const DERLength = 74; // max size of a DER signature -- all Lattice sigs are this long\n    const SIGS_OFFSET = 10 * DERLength; // 10 signature slots precede 10 pubkey slots\n    const PUBKEYS_OFFSET = PUBKEY_PREFIX_LEN + PKH_PREFIX_LEN + SIGS_OFFSET;\n    \n    if (currencyType === 'BTC') {\n      const compressedPubLength = 33;  // Size of compressed public key\n      const pubkeys = [];\n      const sigs = [];\n      let n = 0;\n      // Parse the signature for each output -- they are returned\n      // in the serialized payload in form [pubkey, sig]\n      // There is one signature per output\n      while (off < res.length) {\n        // Exit out if we have seen all the returned sigs and pubkeys\n        if (res[off] !== 0x30) break;\n        // Otherwise grab another set\n        // Note that all DER sigs returned fill the maximum 74 byte buffer, but also\n        // contain a length at off+1, which we use to parse the non-zero data.\n        // First get the signature from its slot\n        const sigStart = off;\n        const sigEnd = off + 2 + res[off + 1];\n        sigs.push(res.slice(sigStart, sigEnd));\n        // Next, shift by the full set of signatures to hit the respective pubkey\n        // NOTE: The data returned is: [<sig0>, <sig1>, ... <sig9>][<pubkey0>, <pubkey1>, ... <pubkey9>]\n        const pubStart = (n * compressedPubLength) + PUBKEYS_OFFSET;\n        const pubEnd = ((n+1) * compressedPubLength) + PUBKEYS_OFFSET;\n        pubkeys.push(res.slice(pubStart, pubEnd));\n        // Update offset to hit the next signature slot\n        off += DERLength;\n        n += 1;\n      }\n      // Build the transaction data to be serialized\n      const preSerializedData = {\n        inputs: [],\n        outputs: [],\n        spenderScriptType: req.spenderScriptType,\n        network: req.origData.network,\n        crypto: this.crypto,\n      };\n\n      // First output comes from request dta\n      preSerializedData.outputs.push({\n        value: req.origData.value,\n        recipient: req.origData.recipient,\n      });\n      if (req.changeData.value > 0) {\n        // Second output comes from change data\n        preSerializedData.outputs.push({\n          value: req.changeData.value,\n          recipient: changeRecipient,\n        });\n      }\n      \n      // Add the inputs\n      for (let i = 0; i < sigs.length; i++) {\n        preSerializedData.inputs.push({\n          hash: req.origData.prevOuts[i].txHash,\n          index: req.origData.prevOuts[i].index,\n          sig: sigs[i],\n          pubkey: pubkeys[i],\n        });\n      }\n\n      // Finally, serialize the transaction\n      const serializedTx = bitcoin.serializeTx(preSerializedData);\n      // Generate the transaction hash so the user can look this transaction up later\n      let preImageTxHash = serializedTx;\n      if (preSerializedData.isSegwitSpend === true) {\n        // Segwit transactions need to be re-serialized using legacy serialization\n        // before the transaction hash is calculated. This allows legacy clients\n        // to validate the transactions.\n        preSerializedData.isSegwitSpend = false;\n        preImageTxHash = bitcoin.serializeTx(preSerializedData);\n      }  \n      let txHash = this.crypto.createHash('sha256').update(Buffer.from(preImageTxHash, 'hex')).digest();\n      txHash = this.crypto.createHash('sha256').update(txHash).digest().reverse().toString('hex');\n      \n      // Add extra data for debugging/lookup purposes\n      returnData.data = {\n        tx: serializedTx,\n        txHash,\n        changeRecipient,\n        sigs,\n      }\n    } else if (currencyType === 'ETH') {\n      const sig = parseDER(res.slice(off, (off + 2 + res[off + 1]))); off += DERLength;\n      const ethAddr = res.slice(off, off + 20);\n      // Determine the `v` param and add it to the sig before returning\n      const rawTx = ethereum.buildEthRawTx(req, sig, ethAddr, req.useEIP155);\n      returnData.data = {\n        tx: `0x${rawTx}`,\n        txHash: `0x${ethereum.hashTransaction(rawTx)}`,\n        sig: {\n          v: sig.v,\n          r: sig.r.toString('hex'),\n          s: sig.s.toString('hex'),\n        },\n        signer: ethAddr,\n      };\n    } else if (currencyType === 'ETH_MSG') {\n      const sig = parseDER(res.slice(off, (off + 2 + res[off + 1]))); off += DERLength;\n      const signer = res.slice(off, off + 20);\n      const validatedSig = ethereum.validateEthereumMsgResponse({ signer, sig }, req);\n      returnData.data = {\n        sig: {\n          v: validatedSig.v,\n          r: validatedSig.r.toString('hex'),\n          s: validatedSig.s.toString('hex'),\n        },\n        signer,\n      }\n    }\n\n    return returnData;\n  }\n\n  _resetActiveWallets() {\n    this.activeWallets.internal.uid = EMPTY_WALLET_UID;\n    this.activeWallets.internal.name = null;\n    this.activeWallets.internal.capabilities = null;\n    this.activeWallets.external.uid = EMPTY_WALLET_UID;\n    this.activeWallets.external.name = null;\n    this.activeWallets.external.capabilities = null;\n    return;\n  }\n\n  getActiveWallet() {\n    if (!EMPTY_WALLET_UID.equals(this.activeWallets.external.uid)) {\n      return this.activeWallets.external;\n    } else if (!EMPTY_WALLET_UID.equals(this.activeWallets.internal.uid)) {\n      return this.activeWallets.internal;\n    } else {\n      return null;\n    }\n  }\n\n  hasActiveWallet() {\n    return this.getActiveWallet() !== null;\n  }\n  \n  // Get 64 bytes representing the public key\n  // This is the uncompressed key without the leading 04 byte\n  pubKeyBytes(LE=false) {\n    const k = this.key.getPublic();\n    const p = k.encode('hex');\n    const pb = Buffer.from(p, 'hex');\n    if (LE === true) {\n      // Need to flip X and Y components to little endian\n      const x = pb.slice(1, 33).reverse();\n      const y = pb.slice(33, 65).reverse();\n      return Buffer.concat([pb[0], x, y]);\n    } else {\n      return pb;\n    }\n  }\n\n  // TODO: Find a better way to export this.\n  parseAbi(source, data, skipErrors=false) {\n    switch (source) {\n      case 'etherscan':\n        return abiParsers[source](data, skipErrors);\n      default:\n        return { err: `No ${source} parser available.` };\n\n    }\n  }\n}\n\nmodule.exports = Client;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":270,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":271,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":272,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":273,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":274,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":275,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":276,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":277,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":278,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":279,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":280,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":281,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":282,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":283,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":284,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":285,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":286,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":287,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":288,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":289,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":290,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":291,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":292,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":293,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":294,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":295,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":296,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":297,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":298,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":299,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":300,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":301,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":302,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":303,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":304,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":305,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":306,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":307,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":308,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":309,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":310,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":311,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":312,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":313,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":314,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":315,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":316,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":317,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":318,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":319,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":320,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":321,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":322,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":323,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":324,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":325,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":326,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":327,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":328,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":329,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":330,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":331,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":332,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":333,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":334,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":335,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":336,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":337,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":338,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":339,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":340,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":341,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":342,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":343,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":344,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":345,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":346,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":347,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":348,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":349,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":350,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":351,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":352,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":353,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":354,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":355,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":356,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":357,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":358,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":359,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":360,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":361,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":362,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":363,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":364,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":365,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":366,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":367,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":368,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":369,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":370,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":371,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":372,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":373,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":374,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":375,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":376,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":377,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":378,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":379,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":380,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":381,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":382,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":383,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":384,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":385,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":386,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":387,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":388,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":389,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":390,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":391,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":392,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":393,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":394,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":395,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":396,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":397,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":398,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":399,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":400,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":401,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":402,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":403,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":404,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":405,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":406,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":407,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":408,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":409,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":410,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":411,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":412,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":413,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":414,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":415,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":416,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":417,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":418,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":419,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":420,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":421,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":422,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":423,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":424,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":425,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":426,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":427,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":428,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":429,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":430,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":431,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":432,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":433,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":434,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":435,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":436,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":437,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":438,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":439,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":440,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":441,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":442,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":443,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":444,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":445,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":446,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":447,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":448,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":449,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":450,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":451,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":452,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":453,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":454,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":455,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":456,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":457,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":458,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":459,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":460,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":461,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":462,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":463,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":464,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":465,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":466,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":467,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":468,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":469,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":470,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":471,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":472,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":473,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":474,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":475,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":476,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":477,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":478,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":479,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":480,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":481,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":482,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":483,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":484,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":485,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":486,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":487,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":488,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":489,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":490,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":491,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":492,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":493,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":494,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":495,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":496,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":497,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":498,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":499,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":500,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":501,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":502,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":503,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":504,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":505,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":506,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":507,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":508,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":509,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":510,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":511,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":512,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":513,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":514,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":515,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":516,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":517,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":518,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":519,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":520,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":521,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":522,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":523,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":524,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":525,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":526,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":527,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":528,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":529,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":530,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":531,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":532,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":533,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":534,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":535,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":536,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":537,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":538,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":539,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":540,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":541,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":542,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":543,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":544,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":545,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":546,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":547,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":548,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":549,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":550,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":551,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":552,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":553,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":554,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":555,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":556,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":557,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":558,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":559,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":560,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":561,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":562,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":563,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":564,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":565,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":566,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":567,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":568,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":569,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":570,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":571,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":572,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":573,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":574,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":575,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":576,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":577,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":578,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":579,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":580,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":581,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":582,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":583,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":584,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":585,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":586,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":587,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":588,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":589,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":590,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":591,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":592,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":593,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":594,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":595,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":596,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":597,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":598,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":599,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":600,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":601,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":602,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":603,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":604,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":605,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":606,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":607,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":608,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":609,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":610,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":611,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":612,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":613,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":614,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":615,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":616,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":617,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":618,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":619,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":620,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":621,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":622,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":623,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":624,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":625,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":626,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":627,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":628,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":629,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":630,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":631,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":632,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":633,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":634,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":635,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":636,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":637,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":638,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":639,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":640,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":641,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":642,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":643,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":644,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":645,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":646,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":647,"column":0},"generated":{"line":648,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":648,"column":0},"generated":{"line":649,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":649,"column":0},"generated":{"line":650,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":650,"column":0},"generated":{"line":651,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":651,"column":0},"generated":{"line":652,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":652,"column":0},"generated":{"line":653,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":653,"column":0},"generated":{"line":654,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":654,"column":0},"generated":{"line":655,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":655,"column":0},"generated":{"line":656,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":656,"column":0},"generated":{"line":657,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":657,"column":0},"generated":{"line":658,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":658,"column":0},"generated":{"line":659,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":659,"column":0},"generated":{"line":660,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":660,"column":0},"generated":{"line":661,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":661,"column":0},"generated":{"line":662,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":662,"column":0},"generated":{"line":663,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":663,"column":0},"generated":{"line":664,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":664,"column":0},"generated":{"line":665,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":665,"column":0},"generated":{"line":666,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":666,"column":0},"generated":{"line":667,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":667,"column":0},"generated":{"line":668,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":668,"column":0},"generated":{"line":669,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":669,"column":0},"generated":{"line":670,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":670,"column":0},"generated":{"line":671,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":671,"column":0},"generated":{"line":672,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":672,"column":0},"generated":{"line":673,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":673,"column":0},"generated":{"line":674,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":674,"column":0},"generated":{"line":675,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":675,"column":0},"generated":{"line":676,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":676,"column":0},"generated":{"line":677,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":677,"column":0},"generated":{"line":678,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":678,"column":0},"generated":{"line":679,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":679,"column":0},"generated":{"line":680,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":680,"column":0},"generated":{"line":681,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":681,"column":0},"generated":{"line":682,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":682,"column":0},"generated":{"line":683,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":683,"column":0},"generated":{"line":684,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":684,"column":0},"generated":{"line":685,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":685,"column":0},"generated":{"line":686,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":686,"column":0},"generated":{"line":687,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":687,"column":0},"generated":{"line":688,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":688,"column":0},"generated":{"line":689,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":689,"column":0},"generated":{"line":690,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":690,"column":0},"generated":{"line":691,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":691,"column":0},"generated":{"line":692,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":692,"column":0},"generated":{"line":693,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":693,"column":0},"generated":{"line":694,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":694,"column":0},"generated":{"line":695,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":695,"column":0},"generated":{"line":696,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":696,"column":0},"generated":{"line":697,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":697,"column":0},"generated":{"line":698,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":698,"column":0},"generated":{"line":699,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":699,"column":0},"generated":{"line":700,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":700,"column":0},"generated":{"line":701,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":701,"column":0},"generated":{"line":702,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":702,"column":0},"generated":{"line":703,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":703,"column":0},"generated":{"line":704,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":704,"column":0},"generated":{"line":705,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":705,"column":0},"generated":{"line":706,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":706,"column":0},"generated":{"line":707,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":707,"column":0},"generated":{"line":708,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":708,"column":0},"generated":{"line":709,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":709,"column":0},"generated":{"line":710,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":710,"column":0},"generated":{"line":711,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":711,"column":0},"generated":{"line":712,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":712,"column":0},"generated":{"line":713,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":713,"column":0},"generated":{"line":714,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":714,"column":0},"generated":{"line":715,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":715,"column":0},"generated":{"line":716,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":716,"column":0},"generated":{"line":717,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":717,"column":0},"generated":{"line":718,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":718,"column":0},"generated":{"line":719,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":719,"column":0},"generated":{"line":720,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":720,"column":0},"generated":{"line":721,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":721,"column":0},"generated":{"line":722,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":722,"column":0},"generated":{"line":723,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":723,"column":0},"generated":{"line":724,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":724,"column":0},"generated":{"line":725,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":725,"column":0},"generated":{"line":726,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":726,"column":0},"generated":{"line":727,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":727,"column":0},"generated":{"line":728,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":728,"column":0},"generated":{"line":729,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":729,"column":0},"generated":{"line":730,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":730,"column":0},"generated":{"line":731,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":731,"column":0},"generated":{"line":732,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":732,"column":0},"generated":{"line":733,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":733,"column":0},"generated":{"line":734,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":734,"column":0},"generated":{"line":735,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":735,"column":0},"generated":{"line":736,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":736,"column":0},"generated":{"line":737,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":737,"column":0},"generated":{"line":738,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":738,"column":0},"generated":{"line":739,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":739,"column":0},"generated":{"line":740,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":740,"column":0},"generated":{"line":741,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":741,"column":0},"generated":{"line":742,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":742,"column":0},"generated":{"line":743,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":743,"column":0},"generated":{"line":744,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":744,"column":0},"generated":{"line":745,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":745,"column":0},"generated":{"line":746,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":746,"column":0},"generated":{"line":747,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":747,"column":0},"generated":{"line":748,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":748,"column":0},"generated":{"line":749,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":749,"column":0},"generated":{"line":750,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":750,"column":0},"generated":{"line":751,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":751,"column":0},"generated":{"line":752,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":752,"column":0},"generated":{"line":753,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":753,"column":0},"generated":{"line":754,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":754,"column":0},"generated":{"line":755,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":755,"column":0},"generated":{"line":756,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":756,"column":0},"generated":{"line":757,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":757,"column":0},"generated":{"line":758,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":758,"column":0},"generated":{"line":759,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":759,"column":0},"generated":{"line":760,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":760,"column":0},"generated":{"line":761,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":761,"column":0},"generated":{"line":762,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":762,"column":0},"generated":{"line":763,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":763,"column":0},"generated":{"line":764,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":764,"column":0},"generated":{"line":765,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":765,"column":0},"generated":{"line":766,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":766,"column":0},"generated":{"line":767,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":767,"column":0},"generated":{"line":768,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":768,"column":0},"generated":{"line":769,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":769,"column":0},"generated":{"line":770,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":770,"column":0},"generated":{"line":771,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":771,"column":0},"generated":{"line":772,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":772,"column":0},"generated":{"line":773,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":773,"column":0},"generated":{"line":774,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":774,"column":0},"generated":{"line":775,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":775,"column":0},"generated":{"line":776,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":776,"column":0},"generated":{"line":777,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":777,"column":0},"generated":{"line":778,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":778,"column":0},"generated":{"line":779,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":779,"column":0},"generated":{"line":780,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":780,"column":0},"generated":{"line":781,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":781,"column":0},"generated":{"line":782,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":782,"column":0},"generated":{"line":783,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":783,"column":0},"generated":{"line":784,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":784,"column":0},"generated":{"line":785,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":785,"column":0},"generated":{"line":786,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":786,"column":0},"generated":{"line":787,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":787,"column":0},"generated":{"line":788,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":788,"column":0},"generated":{"line":789,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":789,"column":0},"generated":{"line":790,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":790,"column":0},"generated":{"line":791,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":791,"column":0},"generated":{"line":792,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":792,"column":0},"generated":{"line":793,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":793,"column":0},"generated":{"line":794,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":794,"column":0},"generated":{"line":795,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":795,"column":0},"generated":{"line":796,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":796,"column":0},"generated":{"line":797,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":797,"column":0},"generated":{"line":798,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":798,"column":0},"generated":{"line":799,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":799,"column":0},"generated":{"line":800,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":800,"column":0},"generated":{"line":801,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":801,"column":0},"generated":{"line":802,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":802,"column":0},"generated":{"line":803,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":803,"column":0},"generated":{"line":804,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":804,"column":0},"generated":{"line":805,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":805,"column":0},"generated":{"line":806,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":806,"column":0},"generated":{"line":807,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":807,"column":0},"generated":{"line":808,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":808,"column":0},"generated":{"line":809,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":809,"column":0},"generated":{"line":810,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":810,"column":0},"generated":{"line":811,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":811,"column":0},"generated":{"line":812,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":812,"column":0},"generated":{"line":813,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":813,"column":0},"generated":{"line":814,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":814,"column":0},"generated":{"line":815,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":815,"column":0},"generated":{"line":816,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":816,"column":0},"generated":{"line":817,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":817,"column":0},"generated":{"line":818,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":818,"column":0},"generated":{"line":819,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":819,"column":0},"generated":{"line":820,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":820,"column":0},"generated":{"line":821,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":821,"column":0},"generated":{"line":822,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":822,"column":0},"generated":{"line":823,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":823,"column":0},"generated":{"line":824,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":824,"column":0},"generated":{"line":825,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":825,"column":0},"generated":{"line":826,"column":0}},{"source":"node_modules/gridplus-sdk/src/client.js","original":{"line":826,"column":0},"generated":{"line":827,"column":0}}],"sources":{"node_modules/gridplus-sdk/src/client.js":"const bitwise = require('bitwise');\nconst superagent = require('superagent');\nconst bitcoin = require('./bitcoin');\nconst ethereum = require('./ethereum');\nconst { buildAddAbiPayload, abiParsers, MAX_ABI_DEFS } = require('./ethereumAbi');\nconst {\n  isValidAssetPath,\n  isValidCoinType,\n  signReqResolver,\n  aes256_decrypt,\n  aes256_encrypt,\n  parseDER,\n  checksum,\n  ensureHexBuffer,\n  getP256KeyPair,\n  getP256KeyPairFromPub,\n  parseLattice1Response,\n  toPaddedDER,\n} = require('./util');\nconst {\n  getFwVersionConst,\n  ADDR_STR_LEN,\n  ENC_MSG_LEN,\n  decResLengths,\n  deviceCodes,\n  encReqCodes,\n  responseCodes,\n  REQUEST_TYPE_BYTE,\n  VERSION_BYTE,\n  messageConstants,\n  BASE_URL,\n  signingSchema,\n} = require('./constants');\nconst Buffer = require('buffer/').Buffer;\nconst EMPTY_WALLET_UID = Buffer.alloc(32);\n\nclass Client {\n  constructor({ baseUrl, crypto, name, privKey, timeout, retryCount } = {}) {\n    // Definitions\n    // if (!baseUrl) throw new Error('baseUrl is required');\n    if (name && name.length > 24) throw new Error('name must be less than 24 characters');\n    if (!crypto) throw new Error('crypto provider is required');\n    this.baseUrl = baseUrl || BASE_URL;\n    this.crypto = crypto;\n    this.name = name || 'Unknown';\n    \n    // Derive an ECDSA keypair using the p256 curve. The public key will\n    // be used as an identifier\n    this.privKey = privKey || this.crypto.randomBytes(32);\n    this.key = getP256KeyPair(this.privKey);//.encode('hex');\n\n    // Stateful params\n    this.ephemeralPub = null;\n    this.sharedSecret = null;\n    this.timeout = timeout || 60000;\n    this.deviceId = null;\n    this.isPaired = false;\n    this.retryCount = retryCount || 3;\n\n    // Information about the current wallet. Should be null unless we know a wallet is present\n    this.activeWallets = {\n      internal: {\n        uid: EMPTY_WALLET_UID,           // 32 byte id\n        name: null,                      // 20 char (max) string\n        capabilities: null,              // 4 byte flag\n        external: false,\n      },\n      external: {\n        uid: EMPTY_WALLET_UID,           // 32 byte id\n        name: null,                      // 20 char (max) string\n        capabilities: null,              // 4 byte flag\n        external: true,\n      }\n    }\n  }\n  \n  //=======================================================================\n  // LATTICE FUNCTIONS\n  //=======================================================================\n\n  // `Connect` will attempt to contact a device based on its deviceId.\n  // The response should include an ephemeral public key, which is used to\n  // pair with the device in a later request\n  connect(deviceId, cb) {\n    // User may \"re-connect\" if a device ID has previously been stored\n    if (typeof deviceId === 'function') {\n      if (!this.deviceId) \n        return cb('No device ID has been stored. Please connect with your device ID first.')\n      cb = deviceId;\n    } else {\n      // If the user passes in a device ID, connect to that device and save\n      // the new ID for future use.\n      this.deviceId = deviceId;\n    }\n    const param = this._buildRequest(deviceCodes.CONNECT, this.pubKeyBytes());\n    this._request(param, (err, res) => {\n      if (err) return cb(err);\n      this.isPaired = this._handleConnect(res) || false;\n      // Check for an active wallet. This will get bypassed if we are not paired.\n      if (this.isPaired) {\n        this._getActiveWallet((err) => {\n          return cb(err, this.isPaired);\n        }, true);\n      } else {\n        return cb(null);\n      }\n      \n    });\n  }\n\n  pair(pairingSecret, cb) {\n    // Build the secret hash from the salt\n    const pubKey = this.pubKeyBytes();\n    const nameBuf = Buffer.alloc(25);\n    if (this.name.length > 24) {\n      return cb('Name is too many characters. Please change it to <25 characters.');\n    }\n    nameBuf.write(this.name);\n    // Make sure we add a null termination byte to the pairing secret\n    const preImage = Buffer.concat([pubKey, nameBuf, Buffer.from(pairingSecret)]);\n    const hash = this.crypto.createHash('sha256').update(preImage).digest();\n    const sig = this.key.sign(hash); // returns an array, not a buffer\n    const derSig = toPaddedDER(sig);\n    const payload = Buffer.concat([nameBuf, derSig]);\n\n    // Build the request\n    const param = this._buildEncRequest(encReqCodes.FINALIZE_PAIRING, payload);\n    this._request(param, (err, res) => {\n      if (err) return cb(err);\n      // Recover the ephemeral key\n      const errStr = this._handlePair(res);\n      if (errStr) return cb(errStr);\n      // Try to get the active wallet once pairing is successful\n      this._getActiveWallet((err) => {\n        if (err) return cb(err);\n        return cb(null, this.hasActiveWallet());\n      }, true);\n    })  \n  }\n\n  test(data, cb) {\n    if (!data.payload)\n      return cb('First argument must contain `testID` and `payload` fields.');\n    const TEST_DATA_SZ = 500;\n    const payload = Buffer.alloc(TEST_DATA_SZ + 6);\n    payload.writeUInt32BE(data.testID, 0);\n    payload.writeUInt16BE(data.payload.length, 4);\n    data.payload.copy(payload, 6);\n    const param = this._buildEncRequest(encReqCodes.TEST, payload);\n    this._request(param, (err, res) => {\n      if (err) return cb(err);\n      const decrypted = this._handleEncResponse(res, decResLengths.test);\n      if (decrypted.err !== null ) \n        return cb(decrypted.err);\n      return cb(null, decrypted.data.slice(65)); // remove ephem pub\n    })\n  }\n\n  getAddresses(opts, cb) {\n    const SKIP_CACHE_FLAG = 1;\n    const MAX_ADDR = 10;\n    const { startPath, n, skipCache=true } = opts;\n    if (startPath === undefined || n === undefined)\n      return cb('Please provide `startPath` and `n` options');\n    if (startPath.length < 2 || startPath.length > 5)\n      return cb('Path must include between 2 and 5 indices');\n    if (n > MAX_ADDR)\n      return cb(`You may only request ${MAX_ADDR} addresses at once.`);\n\n    if ((skipCache === false && false === isValidAssetPath(startPath)) ||\n        (skipCache === true && false === isValidCoinType(startPath)) )\n      return cb('Parent path is not supported');\n\n    const fwConstants = getFwVersionConst(this.fwVersion);\n    let sz = 32 + 20 + 1; // walletUID + 5 u32 indices + count/flag\n    if (fwConstants.varAddrPathSzAllowed) {\n      sz += 1;  // pathDepth\n    } else if (startPath.length !== 5) {\n      return cb('Your Lattice firmware only supports derivation paths with 5 indices. Please upgrade.')\n    }\n    const payload = Buffer.alloc(sz);\n    let off = 0;\n\n    // WalletUID\n    const wallet = this.getActiveWallet();\n    if (wallet === null) return cb('No active wallet.');\n    wallet.uid.copy(payload, off); off += 32;\n    // Build the start path (5x u32 indices)\n    if (fwConstants.varAddrPathSzAllowed) {\n      payload.writeUInt8(startPath.length, off);\n      off += 1;\n    }\n    for (let i = 0; i < 5; i++) {\n      if (i <= startPath.length)\n        payload.writeUInt32BE(startPath[i], off);\n      off += 4;\n    }\n    // Specify the number of subsequent addresses to request.\n    // We also allow the user to skip the cache and request any address related to the asset\n    // in the wallet.\n    let val;\n    if (true === fwConstants.addrFlagsAllowed) {\n      const flag = skipCache === true ? bitwise.nibble.read(SKIP_CACHE_FLAG) : bitwise.nibble.read(0);\n      const count = bitwise.nibble.read(n);\n      val = bitwise.byte.write(flag.concat(count));\n    } else {\n      val = n;\n    }\n    payload.writeUInt8(val, off); off++;\n    const param = this._buildEncRequest(encReqCodes.GET_ADDRESSES, payload);\n    return this._request(param, (err, res) => {\n      if (err) return cb(err);\n      const parsedRes = this._handleGetAddresses(res);\n      if (parsedRes.err) return cb(parsedRes.err);\n      return cb(null, parsedRes.data);\n    })\n  }\n\n  sign(opts, cb, cachedData=null, nextCode=null) {\n    const { currency } = opts;\n    let { data } = opts;\n    if (currency === undefined || data === undefined) {\n      return cb('Please provide `currency` and `data` options');\n    } else if (signReqResolver[currency] === undefined) {\n      return cb('Unsupported currency');\n    }\n    // All transaction requests must be put into the same sized buffer.\n    // This comes from sizeof(GpTransactionRequest_t), but note we remove\n    // the 2-byte schemaId since it is not returned from our resolver.\n    // Note that different firmware versions may have different data sizes.\n    const fwConstants = getFwVersionConst(this.fwVersion);\n    // Build the signing request payload to send to the device. If we catch\n    // bad params, return an error instead\n    data = { fwConstants, ...data};\n    let req, reqPayload;\n    let schema;\n    if (cachedData !== null && nextCode !== null) {\n      req = cachedData;\n      reqPayload = Buffer.concat([nextCode, req.extraDataPayloads.shift()])\n      schema = signingSchema.EXTRA_DATA;\n    } else {\n      req = signReqResolver[currency](data);\n      if (req.err !== undefined) return cb(req.err);\n      if (req.payload.length > fwConstants.reqMaxDataSz)\n        return cb('Transaction is too large');\n      reqPayload = req.payload;\n      schema = req.schema;\n    }\n\n    // Build the payload\n    const payload = Buffer.alloc(2 + fwConstants.reqMaxDataSz);\n    let off = 0;\n    // Whether there will be follow up requests\n    const hasExtraPayloads = req.extraDataPayloads && Number(req.extraDataPayloads.length > 0);\n    payload.writeUInt8(hasExtraPayloads, off); off += 1;  \n    // Copy request schema (e.g. ETH or BTC transfer)\n    payload.writeUInt8(schema, off); off += 1;\n    // Copy the wallet UID\n    const wallet = this.getActiveWallet();\n    if (wallet === null) return cb('No active wallet.');\n    wallet.uid.copy(payload, off); off += wallet.uid.length;\n    // Build data based on the type of request\n    // Copy the payload of the request\n    reqPayload.copy(payload, off);\n    // Construct the encrypted request and send it\n    const param = this._buildEncRequest(encReqCodes.SIGN_TRANSACTION, payload);\n    return this._request(param, (err, res, responseCode) => {\n      if (responseCode === responseCodes.RESP_ERR_WALLET_NOT_PRESENT) {\n        // If we catch a case where the wallet has changed, try getting the new active wallet\n        // and recursively make the original request.\n        this._getActiveWallet((err) => {\n          if (err) return cb(err)\n          else     return this.sign(opts, cb, cachedData, nextCode);\n        })\n      } else if (err) {\n        // If there was another error caught, return it\n        if (err) return cb(err);\n      } else if (hasExtraPayloads) {\n        const decrypted = this._handleEncResponse(res, decResLengths.sign);\n        nextCode = decrypted.data.slice(65, 73);\n        if (!cachedData)\n          cachedData = req;\n        return this.sign(opts, cb, cachedData, nextCode);\n      } else {\n        // Correct wallet and no errors -- handle the response\n        const parsedRes = this._handleSign(res, currency, req);\n        return cb(parsedRes.err, parsedRes.data);\n      }\n    })\n  }\n\n  addAbiDefs(defs, cb, nextCode=null) {\n    const defsToAdd = defs.slice(0, MAX_ABI_DEFS);\n    defs = defs.slice(MAX_ABI_DEFS);\n    let abiPayload;\n    try {\n      abiPayload = buildAddAbiPayload(defsToAdd);\n    } catch (err) {\n      return cb(err);\n    }\n    const payload = Buffer.alloc(abiPayload.length + 10);\n    // Let the firmware know how many defs are remaining *after this one*.\n    // If this is a positive number, firmware will send us a temporary code\n    // to bypass user authorization if the user has configured easy ABI loading.\n    payload.writeUInt16LE(defs.length);\n    // If this is a follow-up request, we don't need to ask for user authorization\n    // if we use the correct temporary u64\n    if (nextCode !== null)\n      nextCode.copy(payload, 2);\n    abiPayload.copy(payload, 10);\n    const param = this._buildEncRequest(encReqCodes.ADD_ABI_DEFS, payload);\n    return this._request(param, (err, res, responseCode) => {\n      if (responseCode && responseCode !== responseCodes.RESP_SUCCESS)\n        return cb('Error making request.');\n      else if (err)\n        return cb(err);\n      const decrypted = this._handleEncResponse(res, decResLengths.addAbiDefs);\n      // Grab the 8 byte code to fast track our next request, if needed\n      nextCode = decrypted.data.slice(65, 73); \n      // No defs left? Return success\n      if (defs.length === 0)\n        return cb(null);\n      // Add the next set\n      this.addAbiDefs(defs, cb, nextCode, defs);\n    })\n  }\n  \n  addPermissionV0(opts, cb) {\n    const { currency, timeWindow, limit, decimals, asset } = opts;\n    if (!currency || timeWindow === undefined || limit === undefined || decimals === undefined ||\n        timeWindow === null || limit === null || decimals === null)\n      return cb('currency, timeWindow, decimals, and limit are all required options.');\n    else if (timeWindow === 0 || limit === 0)\n      return cb('Time window and spending limit must be positive.');\n    // Build the name of the permission\n    let name = currency;\n    if (asset)\n      name += `_${asset}`;\n    // Start building the payload\n    const payload = Buffer.alloc(293);\n    // Copy the name\n    if (Buffer.from(name).length > 255)\n      return cb('Asset name too long.');\n    Buffer.from(name).copy(payload, 0);\n    // Convert the limit to a 32 byte hex buffer and copy it in\n    const limitBuf = ensureHexBuffer(limit)\n    if (limitBuf.length > 32)\n      return cb('Limit too large.');\n    limitBuf.copy(payload, 256 + (32 - limitBuf.length));\n    // Copy the time window (seconds)\n    payload.writeUInt32BE(timeWindow, 288);\n    payload.writeUInt8(decimals, 292);\n    // Encrypt the request and send it to the Lattice.\n    const param = this._buildEncRequest(encReqCodes.ADD_PERMISSION_V0, payload);\n    return this._request(param, (err, res, responseCode) => {\n      if (responseCode === responseCodes.RESP_ERR_WALLET_NOT_PRESENT) {\n        // If we catch a case where the wallet has changed, try getting the new active wallet\n        // and recursively make the original request.\n        this._getActiveWallet((err) => {\n          if (err) return cb(err)\n          else     return this.addPermissionV0(opts, cb);\n        })\n      } else if (err) {\n        // If there was another error caught, return it\n        if (err) return cb(err);\n      } else {\n        // Correct wallet and no errors -- handle the response\n        const d = this._handleEncResponse(res, decResLengths.finalizePair);\n        if (d.err)\n          return cb(d.err);\n        return cb(null);\n      }\n    })\n  }\n\n  //=======================================================================\n  // INTERNAL FUNCTIONS\n  // These handle the logic around building requests and consuming\n  // responses. They take into account the Lattice's serialization scheme\n  // among other protocols.\n  //=======================================================================\n\n  // Get the active wallet in the device. If we already have one recorded,\n  // we don't need to do anything\n  // returns cb(err) -- err is a string\n  _getActiveWallet(cb, forceRefresh=false) {\n    if (forceRefresh !== true && (this.hasActiveWallet() === true || this.isPaired !== true)) {\n      // If the active wallet already exists, or if we are not paired, skip the request\n      return cb(null);\n    } else {\n      // No active wallet? Get it from the device\n      const payload = Buffer.alloc(0);\n      const param = this._buildEncRequest(encReqCodes.GET_WALLETS, payload);\n      return this._request(param, (err, res) => {\n        if (err) {\n          this._resetActiveWallets();\n          return cb(err);\n        }\n        return cb(this._handleGetWallets(res));\n      })\n    }\n  }\n\n  // Get the shared secret, derived via ECDH from the local private key\n  // and the ephemeral public key\n  // @returns Buffer\n  _getSharedSecret() {\n    // Once every ~256 attempts, we will get a key that starts with a `00` byte, which\n    // can lead to problems initializing AES if we don't force a 32 byte BE buffer.\n    return Buffer.from(this.key.derive(this.ephemeralPub.getPublic()).toArray('be', 32));\n  }\n\n  // Get the ephemeral id, which is the first 4 bytes of the shared secret\n  // generated from the local private key and the ephemeral public key from\n  // the device.\n  // @returns Buffer\n  _getEphemId() {\n    if (this.ephemeralPub === null) return null;\n    // EphemId is the first 4 bytes of the hash of the shared secret\n    const secret = this._getSharedSecret();\n    const hash = this.crypto.createHash('sha256').update(secret).digest();\n    return hash.slice(0, 4);\n  }\n\n  _buildEncRequest(enc_request_code, payload) {\n    // Get the ephemeral id - all encrypted requests require there to be an\n    // epehemeral public key in order to send\n    const ephemId = parseInt(this._getEphemId().toString('hex'), 16)\n    \n    // Build the payload and checksum\n    const payloadPreCs = Buffer.concat([Buffer.from([enc_request_code]), payload]);\n    const cs = checksum(payloadPreCs);\n    const payloadBuf = Buffer.alloc(payloadPreCs.length + 4);\n\n    // Lattice validates checksums in little endian\n    payloadPreCs.copy(payloadBuf, 0);\n    payloadBuf.writeUInt32LE(cs, payloadPreCs.length);\n    // Encrypt this payload\n    const secret = this._getSharedSecret();\n    const newEncPayload = aes256_encrypt(payloadBuf, secret);\n\n    // Write to the overall payload. We must use the same length\n    // for every encrypted request and must include a 32-bit ephemId\n    // along with the encrypted data\n    const newPayload = Buffer.alloc(ENC_MSG_LEN + 4);\n    // First 4 bytes are the ephemeral id (in little endian)\n    newPayload.writeUInt32LE(ephemId, 0);\n    // Next N bytes\n    newEncPayload.copy(newPayload, 4);\n    return this._buildRequest(deviceCodes.ENCRYPTED_REQUEST, newPayload);\n  \n  }\n\n  // Build a request to send to the device.\n  // @param [request_code] {uint8}  - 8-bit unsigned integer representing the message request code\n  // @param [id] {buffer} - 4 byte identifier (comes from HSM for subsequent encrypted reqs)\n  // @param [payload] {buffer} - serialized payload\n  // @returns {buffer}\n  _buildRequest(request_code, payload) {\n    // Length of payload;\n    // we add 1 to the payload length to account for the request_code byte\n    let L = payload && Buffer.isBuffer(payload) ? payload.length + 1 : 1;\n    if (request_code === deviceCodes.ENCRYPTED_REQUEST) {\n      L = 1 + payload.length;\n    }\n    let i = 0;\n    const preReq = Buffer.alloc(L + 8);\n    // Build the header\n    i = preReq.writeUInt8(VERSION_BYTE, i);\n    i = preReq.writeUInt8(REQUEST_TYPE_BYTE, i);\n    const id = this.crypto.randomBytes(4);\n    i = preReq.writeUInt32BE(parseInt(`0x${id.toString('hex')}`), i);\n    i = preReq.writeUInt16BE(L, i);\n    // Build the payload\n    i = preReq.writeUInt8(request_code, i);\n    if (L > 1) i = payload.copy(preReq, i);\n    // Add the checksum\n    const cs = checksum(preReq);\n    const req = Buffer.alloc(preReq.length + 4); // 4-byte checksum\n    i = preReq.copy(req);\n    req.writeUInt32BE(cs, i);\n    return req;\n  }\n\n  _request(data, cb, retryCount=this.retryCount) {\n    if (!this.deviceId) return cb('Serial is not set. Please set it and try again.');\n    const url = `${this.baseUrl}/${this.deviceId}`;\n    superagent.post(url).timeout(this.timeout)\n    .send({data})\n    .then(res => {\n      if (!res || !res.body) return cb(`Invalid response: ${res}`)\n      else if (res.body.status !== 200) return cb(`Error code ${res.body.status}: ${res.body.message}`)\n      const parsed = parseLattice1Response(res.body.message);\n      // If the device is busy, retry if we can\n      if (( parsed.responseCode === responseCodes.RESP_ERR_DEV_BUSY ||\n            parsed.responseCode === responseCodes.RESP_ERR_GCE_TIMEOUT ) \n            && (retryCount > 0)) {\n        return setTimeout(() => { this._request(data, cb, retryCount-1) }, 3000);\n      }\n      // If we caugh a `ErrWalletNotPresent` make sure we aren't caching an old ative walletUID\n      if (parsed.responseCode === responseCodes.RESP_ERR_WALLET_NOT_PRESENT) \n        this._resetActiveWallets();\n      // If there was an error in the response, return it\n      if (parsed.err) \n        return cb(parsed.err);\n      return cb(null, parsed.data, parsed.responseCode); \n    })\n    .catch((err) => {\n      const isTimeout = err.code === 'ECONNABORTED' && err.errno === 'ETIME';\n      if (isTimeout)\n        return cb('Timeout waiting for device. Please ensure it is connected to the internet and try again in a minute.')\n      else\n        return cb('Failed to make request to device.');\n    });\n  }\n\n  // ----- Device response handlers -----\n\n  // Connect will call `StartPairingMode` on the device, which gives the\n  // user 60 seconds to finalize the pairing\n  // This will return an ephemeral public key, which is needed for the next\n  // request. If the device is already paired, this ephemPub is simply used\n  // to encrypt the next request. If the device is not paired, it is needed\n  // to pair the device within 60 seconds.\n  // @returns true if we are paired to the device already\n  _handleConnect(res) {\n    let off = 0;\n    const pairingStatus = res.readUInt8(off); off++;\n    // If we are already paired, we get the next ephemeral key\n    const pub = res.slice(off, off + 65).toString('hex'); off += 65;\n    // Grab the firmware version (will be 0-length for older fw versions)\n    // It is of format |fix|minor|major|reserved|\n    this.fwVersion = res.slice(off, off + 4);\n    // Set the public key\n    this.ephemeralPub = getP256KeyPairFromPub(pub);\n    // return the state of our pairing\n    return (pairingStatus === messageConstants.PAIRED);\n  }\n\n  // All encrypted responses must be decrypted with the previous shared secret. Per specification,\n  // decrypted responses will all contain a 65-byte public key as the prefix, which becomes the \n  // new ephemeralPub.\n  _handleEncResponse(encRes, len) {\n    // Decrypt response\n    const secret = this._getSharedSecret();\n    const encData = encRes.slice(0, ENC_MSG_LEN);\n    const res = aes256_decrypt(encData, secret);\n    // len does not include a 65-byte pubkey that prefies each encResponse\n    len += 65;\n    // Validate checksum. It will be the last 4 bytes of the decrypted payload.\n    // The length of the decrypted payload will be fixed for each given message type.\n    const toCheck = res.slice(0, len);\n    const cs = parseInt(`0x${res.slice(len, len+4).toString('hex')}`);\n    const csCheck = checksum(toCheck);\n    if (cs !== csCheck) return { err: `Checksum mismatch in response from Lattice (calculated ${csCheck}, wanted ${cs})` };\n\n    // First 65 bytes is the next ephemeral pubkey\n    const pub = res.slice(0, 65).toString('hex');\n    try {\n      this.ephemeralPub = getP256KeyPairFromPub(pub);\n      return { err: null, data: res };\n    } catch (e) {\n      return { err: `Error handling getAddresses response: ${e.toString()}` };\n    }\n  }\n\n  // Pair will create a new pairing if the user successfully enters the secret\n  // into the device in time. If successful (status=0), the device will return\n  // a new ephemeral public key, which is used to derive a shared secret\n  // for the next request\n  // @returns error (or null)\n  _handlePair(encRes) {\n    const d = this._handleEncResponse(encRes, decResLengths.finalizePair);\n    if (d.err) return d.err;\n    // Remove the pairing salt - we're paired!\n    this.pairingSalt = null;\n    this.isPaired = true;\n    return null;\n  }\n\n  // GetAddresses will return an array of address strings\n  _handleGetAddresses(encRes) {\n    // Handle the encrypted response\n    const decrypted = this._handleEncResponse(encRes, decResLengths.getAddresses);\n    if (decrypted.err !== null ) return decrypted;\n\n    const addrData = decrypted.data;\n    let off = 65; // Skip 65 byte pubkey prefix\n    // Look for addresses until we reach the end (a 4 byte checksum)\n    const addrs = [];\n    while (off + 4 < decResLengths.getAddresses) {\n      const addrBytes = addrData.slice(off, off+ADDR_STR_LEN); off += ADDR_STR_LEN;\n      // Return the UTF-8 representation\n      const len = addrBytes.indexOf(0); // First 0 is the null terminator\n      if (len > 0)\n        addrs.push(addrBytes.slice(0, len).toString());\n    }\n    return { data: addrs, err: null };\n  }\n\n  _handleGetWallets(encRes) {\n    const decrypted = this._handleEncResponse(encRes, decResLengths.getWallets);\n    if (decrypted.err !== null) return decrypted;\n    const res = decrypted.data;\n    let walletUID;\n    // Read the external wallet data first. If it is non-null, the external wallet will\n    // be the active wallet of the device and we should save it.\n    // If the external wallet is blank, it means there is no card present and we should \n    // save and use the interal wallet.\n    // If both wallets are empty, it means the device still needs to be set up.\n    const walletDescriptorLen = 71;\n    // Skip 65byte pubkey prefix. WalletDescriptor contains 32byte id + 4byte flag + 35byte name\n    let off = 65;\n    // Internal first\n    let hasActiveWallet = false;\n    walletUID = res.slice(off, off+32);\n    this.activeWallets.internal.uid = walletUID;\n    this.activeWallets.internal.capabilities = res.readUInt32BE(off+32);\n    this.activeWallets.internal.name = res.slice(off+36, off+walletDescriptorLen);\n    if (!walletUID.equals(EMPTY_WALLET_UID))\n      hasActiveWallet = true;\n\n    // Offset the first item\n    off += walletDescriptorLen;\n    \n    // External\n    walletUID = res.slice(off, off+32);\n    this.activeWallets.external.uid = walletUID;\n    this.activeWallets.external.capabilities = res.readUInt32BE(off+32);\n    this.activeWallets.external.name = res.slice(off+36, off+walletDescriptorLen);\n    if (!walletUID.equals(EMPTY_WALLET_UID))\n      hasActiveWallet = true;\n    if (hasActiveWallet === true)\n      return null;\n    else\n      return 'No active wallet.';\n  }\n\n  _handleSign(encRes, currencyType, req=null) {\n    // Handle the encrypted response\n    const decrypted = this._handleEncResponse(encRes, decResLengths.sign);\n    if (decrypted.err !== null ) return { err: decrypted.err };\n    const PUBKEY_PREFIX_LEN = 65;\n    const PKH_PREFIX_LEN = 20;\n    let off = PUBKEY_PREFIX_LEN; // Skip past pubkey prefix\n    const res = decrypted.data;\n\n    // Get the change data if we are making a BTC transaction\n    let changeRecipient;\n    if (currencyType === 'BTC') {\n      const changeVersion = bitcoin.addressVersion[req.changeData.changeVersion];\n      const changePubkeyhash = res.slice(off, off + PKH_PREFIX_LEN); off += PKH_PREFIX_LEN;\n      changeRecipient = bitcoin.getBitcoinAddress(changePubkeyhash, changeVersion);\n    }\n    // Start building return data\n    const returnData = { err: null, data: null };\n    const DERLength = 74; // max size of a DER signature -- all Lattice sigs are this long\n    const SIGS_OFFSET = 10 * DERLength; // 10 signature slots precede 10 pubkey slots\n    const PUBKEYS_OFFSET = PUBKEY_PREFIX_LEN + PKH_PREFIX_LEN + SIGS_OFFSET;\n    \n    if (currencyType === 'BTC') {\n      const compressedPubLength = 33;  // Size of compressed public key\n      const pubkeys = [];\n      const sigs = [];\n      let n = 0;\n      // Parse the signature for each output -- they are returned\n      // in the serialized payload in form [pubkey, sig]\n      // There is one signature per output\n      while (off < res.length) {\n        // Exit out if we have seen all the returned sigs and pubkeys\n        if (res[off] !== 0x30) break;\n        // Otherwise grab another set\n        // Note that all DER sigs returned fill the maximum 74 byte buffer, but also\n        // contain a length at off+1, which we use to parse the non-zero data.\n        // First get the signature from its slot\n        const sigStart = off;\n        const sigEnd = off + 2 + res[off + 1];\n        sigs.push(res.slice(sigStart, sigEnd));\n        // Next, shift by the full set of signatures to hit the respective pubkey\n        // NOTE: The data returned is: [<sig0>, <sig1>, ... <sig9>][<pubkey0>, <pubkey1>, ... <pubkey9>]\n        const pubStart = (n * compressedPubLength) + PUBKEYS_OFFSET;\n        const pubEnd = ((n+1) * compressedPubLength) + PUBKEYS_OFFSET;\n        pubkeys.push(res.slice(pubStart, pubEnd));\n        // Update offset to hit the next signature slot\n        off += DERLength;\n        n += 1;\n      }\n      // Build the transaction data to be serialized\n      const preSerializedData = {\n        inputs: [],\n        outputs: [],\n        spenderScriptType: req.spenderScriptType,\n        network: req.origData.network,\n        crypto: this.crypto,\n      };\n\n      // First output comes from request dta\n      preSerializedData.outputs.push({\n        value: req.origData.value,\n        recipient: req.origData.recipient,\n      });\n      if (req.changeData.value > 0) {\n        // Second output comes from change data\n        preSerializedData.outputs.push({\n          value: req.changeData.value,\n          recipient: changeRecipient,\n        });\n      }\n      \n      // Add the inputs\n      for (let i = 0; i < sigs.length; i++) {\n        preSerializedData.inputs.push({\n          hash: req.origData.prevOuts[i].txHash,\n          index: req.origData.prevOuts[i].index,\n          sig: sigs[i],\n          pubkey: pubkeys[i],\n        });\n      }\n\n      // Finally, serialize the transaction\n      const serializedTx = bitcoin.serializeTx(preSerializedData);\n      // Generate the transaction hash so the user can look this transaction up later\n      let preImageTxHash = serializedTx;\n      if (preSerializedData.isSegwitSpend === true) {\n        // Segwit transactions need to be re-serialized using legacy serialization\n        // before the transaction hash is calculated. This allows legacy clients\n        // to validate the transactions.\n        preSerializedData.isSegwitSpend = false;\n        preImageTxHash = bitcoin.serializeTx(preSerializedData);\n      }  \n      let txHash = this.crypto.createHash('sha256').update(Buffer.from(preImageTxHash, 'hex')).digest();\n      txHash = this.crypto.createHash('sha256').update(txHash).digest().reverse().toString('hex');\n      \n      // Add extra data for debugging/lookup purposes\n      returnData.data = {\n        tx: serializedTx,\n        txHash,\n        changeRecipient,\n        sigs,\n      }\n    } else if (currencyType === 'ETH') {\n      const sig = parseDER(res.slice(off, (off + 2 + res[off + 1]))); off += DERLength;\n      const ethAddr = res.slice(off, off + 20);\n      // Determine the `v` param and add it to the sig before returning\n      const rawTx = ethereum.buildEthRawTx(req, sig, ethAddr, req.useEIP155);\n      returnData.data = {\n        tx: `0x${rawTx}`,\n        txHash: `0x${ethereum.hashTransaction(rawTx)}`,\n        sig: {\n          v: sig.v,\n          r: sig.r.toString('hex'),\n          s: sig.s.toString('hex'),\n        },\n        signer: ethAddr,\n      };\n    } else if (currencyType === 'ETH_MSG') {\n      const sig = parseDER(res.slice(off, (off + 2 + res[off + 1]))); off += DERLength;\n      const signer = res.slice(off, off + 20);\n      const validatedSig = ethereum.validateEthereumMsgResponse({ signer, sig }, req);\n      returnData.data = {\n        sig: {\n          v: validatedSig.v,\n          r: validatedSig.r.toString('hex'),\n          s: validatedSig.s.toString('hex'),\n        },\n        signer,\n      }\n    }\n\n    return returnData;\n  }\n\n  _resetActiveWallets() {\n    this.activeWallets.internal.uid = EMPTY_WALLET_UID;\n    this.activeWallets.internal.name = null;\n    this.activeWallets.internal.capabilities = null;\n    this.activeWallets.external.uid = EMPTY_WALLET_UID;\n    this.activeWallets.external.name = null;\n    this.activeWallets.external.capabilities = null;\n    return;\n  }\n\n  getActiveWallet() {\n    if (!EMPTY_WALLET_UID.equals(this.activeWallets.external.uid)) {\n      return this.activeWallets.external;\n    } else if (!EMPTY_WALLET_UID.equals(this.activeWallets.internal.uid)) {\n      return this.activeWallets.internal;\n    } else {\n      return null;\n    }\n  }\n\n  hasActiveWallet() {\n    return this.getActiveWallet() !== null;\n  }\n  \n  // Get 64 bytes representing the public key\n  // This is the uncompressed key without the leading 04 byte\n  pubKeyBytes(LE=false) {\n    const k = this.key.getPublic();\n    const p = k.encode('hex');\n    const pb = Buffer.from(p, 'hex');\n    if (LE === true) {\n      // Need to flip X and Y components to little endian\n      const x = pb.slice(1, 33).reverse();\n      const y = pb.slice(33, 65).reverse();\n      return Buffer.concat([pb[0], x, y]);\n    } else {\n      return pb;\n    }\n  }\n\n  // TODO: Find a better way to export this.\n  parseAbi(source, data, skipErrors=false) {\n    switch (source) {\n      case 'etherscan':\n        return abiParsers[source](data, skipErrors);\n      default:\n        return { err: `No ${source} parser available.` };\n\n    }\n  }\n}\n\nmodule.exports = Client;\n"},"lineCount":827}},"error":null,"hash":"46ce06665f382be478cf37c9453fc66c","cacheData":{"env":{}}}